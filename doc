KIND:     LimitRange
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the limits enforced. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     LimitRangeSpec defines a min/max usage limit for resources that match on
     kind.

FIELDS:
   limits	<[]Object> -required-
     Limits is the list of LimitRangeItem objects that are enforced.

KIND:     Namespace
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the behavior of the Namespace. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     NamespaceSpec describes the attributes on a Namespace.

FIELDS:
   finalizers	<[]string>
     Finalizers is an opaque list of values that must be empty to permanently
     remove object from storage. More info:
     https://kubernetes.io/docs/tasks/administer-cluster/namespaces/

KIND:     Node
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the behavior of a node.
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     NodeSpec describes the attributes that a node is created with.

FIELDS:
   configSource	<Object>
     If specified, the source to get node configuration from The
     DynamicKubeletConfig feature gate must be enabled for the Kubelet to use
     this field

   externalID	<string>
     Deprecated. Not all kubelets will set this field. Remove field after 1.13.
     see: https://issues.k8s.io/61966

   podCIDR	<string>
     PodCIDR represents the pod IP range assigned to the node.

   podCIDRs	<[]string>
     podCIDRs represents the IP ranges assigned to the node for usage by Pods on
     that node. If this field is specified, the 0th entry must match the podCIDR
     field. It may contain at most 1 value for each of IPv4 and IPv6.

   providerID	<string>
     ID of the node assigned by the cloud provider in the format:
     <ProviderName>://<ProviderSpecificNodeID>

   taints	<[]Object>
     If specified, the node's taints.

   unschedulable	<boolean>
     Unschedulable controls node schedulability of new pods. By default, node is
     schedulable. More info:
     https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration

KIND:     PersistentVolumeClaim
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the desired characteristics of a volume requested by a pod
     author. More info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

     PersistentVolumeClaimSpec describes the common attributes of storage
     devices and allows a Source for provider-specific attributes

FIELDS:
   accessModes	<[]string>
     AccessModes contains the desired access modes the volume should have. More
     info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1

   dataSource	<Object>
     This field can be used to specify either: * An existing VolumeSnapshot
     object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC
     (PersistentVolumeClaim) * An existing custom resource that implements data
     population (Alpha) In order to use custom resource types that implement
     data population, the AnyVolumeDataSource feature gate must be enabled. If
     the provisioner or an external controller can support the specified data
     source, it will create a new volume based on the contents of the specified
     data source.

   resources	<Object>
     Resources represents the minimum resources the volume should have. More
     info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

   selector	<Object>
     A label query over volumes to consider for binding.

   storageClassName	<string>
     Name of the StorageClass required by the claim. More info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1

   volumeMode	<string>
     volumeMode defines what type of volume is required by the claim. Value of
     Filesystem is implied when not included in claim spec.

   volumeName	<string>
     VolumeName is the binding reference to the PersistentVolume backing this
     claim.

KIND:     PersistentVolume
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines a specification of a persistent volume owned by the cluster.
     Provisioned by an administrator. More info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes

     PersistentVolumeSpec is the specification of a persistent volume.

FIELDS:
   accessModes	<[]string>
     AccessModes contains all ways the volume can be mounted. More info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes

   awsElasticBlockStore	<Object>
     AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     kubelet's host machine and then exposed to the pod. More info:
     https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

   azureDisk	<Object>
     AzureDisk represents an Azure Data Disk mount on the host and bind mount to
     the pod.

   azureFile	<Object>
     AzureFile represents an Azure File Service mount on the host and bind mount
     to the pod.

   capacity	<map[string]string>
     A description of the persistent volume's resources and capacity. More info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity

   cephfs	<Object>
     CephFS represents a Ceph FS mount on the host that shares a pod's lifetime

   cinder	<Object>
     Cinder represents a cinder volume attached and mounted on kubelets host
     machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md

   claimRef	<Object>
     ClaimRef is part of a bi-directional binding between PersistentVolume and
     PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName
     is the authoritative bind between PV and PVC. More info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding

   csi	<Object>
     CSI represents storage that is handled by an external CSI driver (Beta
     feature).

   fc	<Object>
     FC represents a Fibre Channel resource that is attached to a kubelet's host
     machine and then exposed to the pod.

   flexVolume	<Object>
     FlexVolume represents a generic volume resource that is
     provisioned/attached using an exec based plugin.

   flocker	<Object>
     Flocker represents a Flocker volume attached to a kubelet's host machine
     and exposed to the pod for its usage. This depends on the Flocker control
     service being running

   gcePersistentDisk	<Object>
     GCEPersistentDisk represents a GCE Disk resource that is attached to a
     kubelet's host machine and then exposed to the pod. Provisioned by an
     admin. More info:
     https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

   glusterfs	<Object>
     Glusterfs represents a Glusterfs volume that is attached to a host and
     exposed to the pod. Provisioned by an admin. More info:
     https://examples.k8s.io/volumes/glusterfs/README.md

   hostPath	<Object>
     HostPath represents a directory on the host. Provisioned by a developer or
     tester. This is useful for single-node development and testing only!
     On-host storage is not supported in any way and WILL NOT WORK in a
     multi-node cluster. More info:
     https://kubernetes.io/docs/concepts/storage/volumes#hostpath

   iscsi	<Object>
     ISCSI represents an ISCSI Disk resource that is attached to a kubelet's
     host machine and then exposed to the pod. Provisioned by an admin.

   local	<Object>
     Local represents directly-attached storage with node affinity

   mountOptions	<[]string>
     A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will
     simply fail if one is invalid. More info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options

   nfs	<Object>
     NFS represents an NFS mount on the host. Provisioned by an admin. More
     info: https://kubernetes.io/docs/concepts/storage/volumes#nfs

   nodeAffinity	<Object>
     NodeAffinity defines constraints that limit what nodes this volume can be
     accessed from. This field influences the scheduling of pods that use this
     volume.

   persistentVolumeReclaimPolicy	<string>
     What happens to a persistent volume when released from its claim. Valid
     options are Retain (default for manually created PersistentVolumes), Delete
     (default for dynamically provisioned PersistentVolumes), and Recycle
     (deprecated). Recycle must be supported by the volume plugin underlying
     this PersistentVolume. More info:
     https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming

   photonPersistentDisk	<Object>
     PhotonPersistentDisk represents a PhotonController persistent disk attached
     and mounted on kubelets host machine

   portworxVolume	<Object>
     PortworxVolume represents a portworx volume attached and mounted on
     kubelets host machine

   quobyte	<Object>
     Quobyte represents a Quobyte mount on the host that shares a pod's lifetime

   rbd	<Object>
     RBD represents a Rados Block Device mount on the host that shares a pod's
     lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md

   scaleIO	<Object>
     ScaleIO represents a ScaleIO persistent volume attached and mounted on
     Kubernetes nodes.

   storageClassName	<string>
     Name of StorageClass to which this persistent volume belongs. Empty value
     means that this volume does not belong to any StorageClass.

   storageos	<Object>
     StorageOS represents a StorageOS volume that is attached to the kubelet's
     host machine and mounted into the pod More info:
     https://examples.k8s.io/volumes/storageos/README.md

   volumeMode	<string>
     volumeMode defines if a volume is intended to be used with a formatted
     filesystem or to remain in raw block state. Value of Filesystem is implied
     when not included in spec.

   vsphereVolume	<Object>
     VsphereVolume represents a vSphere volume attached and mounted on kubelets
     host machine

KIND:     Pod
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of the pod. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     PodSpec is a description of a pod.

FIELDS:
   activeDeadlineSeconds	<integer>
     Optional duration in seconds the pod may be active on the node relative to
     StartTime before the system will actively try to mark it failed and kill
     associated containers. Value must be a positive integer.

   affinity	<Object>
     If specified, the pod's scheduling constraints

   automountServiceAccountToken	<boolean>
     AutomountServiceAccountToken indicates whether a service account token
     should be automatically mounted.

   containers	<[]Object> -required-
     List of containers belonging to the pod. Containers cannot currently be
     added or removed. There must be at least one container in a Pod. Cannot be
     updated.

   dnsConfig	<Object>
     Specifies the DNS parameters of a pod. Parameters specified here will be
     merged to the generated DNS configuration based on DNSPolicy.

   dnsPolicy	<string>
     Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are
     'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS
     parameters given in DNSConfig will be merged with the policy selected with
     DNSPolicy. To have DNS options set along with hostNetwork, you have to
     specify DNS policy explicitly to 'ClusterFirstWithHostNet'.

   enableServiceLinks	<boolean>
     EnableServiceLinks indicates whether information about services should be
     injected into pod's environment variables, matching the syntax of Docker
     links. Optional: Defaults to true.

   ephemeralContainers	<[]Object>
     List of ephemeral containers run in this pod. Ephemeral containers may be
     run in an existing pod to perform user-initiated actions such as debugging.
     This list cannot be specified when creating a pod, and it cannot be
     modified by updating the pod spec. In order to add an ephemeral container
     to an existing pod, use the pod's ephemeralcontainers subresource. This
     field is alpha-level and is only honored by servers that enable the
     EphemeralContainers feature.

   hostAliases	<[]Object>
     HostAliases is an optional list of hosts and IPs that will be injected into
     the pod's hosts file if specified. This is only valid for non-hostNetwork
     pods.

   hostIPC	<boolean>
     Use the host's ipc namespace. Optional: Default to false.

   hostNetwork	<boolean>
     Host networking requested for this pod. Use the host's network namespace.
     If this option is set, the ports that will be used must be specified.
     Default to false.

   hostPID	<boolean>
     Use the host's pid namespace. Optional: Default to false.

   hostname	<string>
     Specifies the hostname of the Pod If not specified, the pod's hostname will
     be set to a system-defined value.

   imagePullSecrets	<[]Object>
     ImagePullSecrets is an optional list of references to secrets in the same
     namespace to use for pulling any of the images used by this PodSpec. If
     specified, these secrets will be passed to individual puller
     implementations for them to use. For example, in the case of docker, only
     DockerConfig type secrets are honored. More info:
     https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod

   initContainers	<[]Object>
     List of initialization containers belonging to the pod. Init containers are
     executed in order prior to containers being started. If any init container
     fails, the pod is considered to have failed and is handled according to its
     restartPolicy. The name for an init container or normal container must be
     unique among all containers. Init containers may not have Lifecycle
     actions, Readiness probes, Liveness probes, or Startup probes. The
     resourceRequirements of an init container are taken into account during
     scheduling by finding the highest request/limit for each resource type, and
     then using the max of of that value or the sum of the normal containers.
     Limits are applied to init containers in a similar fashion. Init containers
     cannot currently be added or removed. Cannot be updated. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/init-containers/

   nodeName	<string>
     NodeName is a request to schedule this pod onto a specific node. If it is
     non-empty, the scheduler simply schedules this pod onto that node, assuming
     that it fits resource requirements.

   nodeSelector	<map[string]string>
     NodeSelector is a selector which must be true for the pod to fit on a node.
     Selector which must match a node's labels for the pod to be scheduled on
     that node. More info:
     https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

   overhead	<map[string]string>
     Overhead represents the resource overhead associated with running a pod for
     a given RuntimeClass. This field will be autopopulated at admission time by
     the RuntimeClass admission controller. If the RuntimeClass admission
     controller is enabled, overhead must not be set in Pod create requests. The
     RuntimeClass admission controller will reject Pod create requests which
     have the overhead already set. If RuntimeClass is configured and selected
     in the PodSpec, Overhead will be set to the value defined in the
     corresponding RuntimeClass, otherwise it will remain unset and treated as
     zero. More info:
     https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This
     field is alpha-level as of Kubernetes v1.16, and is only honored by servers
     that enable the PodOverhead feature.

   preemptionPolicy	<string>
     PreemptionPolicy is the Policy for preempting pods with lower priority. One
     of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
     This field is beta-level, gated by the NonPreemptingPriority feature-gate.

   priority	<integer>
     The priority value. Various system components use this field to find the
     priority of the pod. When Priority Admission Controller is enabled, it
     prevents users from setting this field. The admission controller populates
     this field from PriorityClassName. The higher the value, the higher the
     priority.

   priorityClassName	<string>
     If specified, indicates the pod's priority. "system-node-critical" and
     "system-cluster-critical" are two special keywords which indicate the
     highest priorities with the former being the highest priority. Any other
     name must be defined by creating a PriorityClass object with that name. If
     not specified, the pod priority will be default or zero if there is no
     default.

   readinessGates	<[]Object>
     If specified, all readiness gates will be evaluated for pod readiness. A
     pod is ready when all its containers are ready AND all conditions specified
     in the readiness gates have status equal to "True" More info:
     https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md

   restartPolicy	<string>
     Restart policy for all containers within the pod. One of Always, OnFailure,
     Never. Default to Always. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy

   runtimeClassName	<string>
     RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group,
     which should be used to run this pod. If no RuntimeClass resource matches
     the named class, the pod will not be run. If unset or empty, the "legacy"
     RuntimeClass will be used, which is an implicit class with an empty
     definition that uses the default runtime handler. More info:
     https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a
     beta feature as of Kubernetes v1.14.

   schedulerName	<string>
     If specified, the pod will be dispatched by specified scheduler. If not
     specified, the pod will be dispatched by default scheduler.

   securityContext	<Object>
     SecurityContext holds pod-level security attributes and common container
     settings. Optional: Defaults to empty. See type description for default
     values of each field.

   serviceAccount	<string>
     DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
     Deprecated: Use serviceAccountName instead.

   serviceAccountName	<string>
     ServiceAccountName is the name of the ServiceAccount to use to run this
     pod. More info:
     https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

   setHostnameAsFQDN	<boolean>
     If true the pod's hostname will be configured as the pod's FQDN, rather
     than the leaf name (the default). In Linux containers, this means setting
     the FQDN in the hostname field of the kernel (the nodename field of struct
     utsname). In Windows containers, this means setting the registry value of
     hostname for the registry key
     HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to
     FQDN. If a pod does not have FQDN, this has no effect. Default to false.

   shareProcessNamespace	<boolean>
     Share a single process namespace between all of the containers in a pod.
     When this is set containers will be able to view and signal processes from
     other containers in the same pod, and the first process in each container
     will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both
     be set. Optional: Default to false.

   subdomain	<string>
     If specified, the fully qualified Pod hostname will be
     "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not
     specified, the pod will not have a domainname at all.

   terminationGracePeriodSeconds	<integer>
     Optional duration in seconds the pod needs to terminate gracefully. May be
     decreased in delete request. Value must be non-negative integer. The value
     zero indicates delete immediately. If this value is nil, the default grace
     period will be used instead. The grace period is the duration in seconds
     after the processes running in the pod are sent a termination signal and
     the time when the processes are forcibly halted with a kill signal. Set
     this value longer than the expected cleanup time for your process. Defaults
     to 30 seconds.

   tolerations	<[]Object>
     If specified, the pod's tolerations.

   topologySpreadConstraints	<[]Object>
     TopologySpreadConstraints describes how a group of pods ought to spread
     across topology domains. Scheduler will schedule pods in a way which abides
     by the constraints. All topologySpreadConstraints are ANDed.

   volumes	<[]Object>
     List of volumes that can be mounted by containers belonging to the pod.
     More info: https://kubernetes.io/docs/concepts/storage/volumes

KIND:     ReplicationController
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the specification of the desired behavior of the replication
     controller. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     ReplicationControllerSpec is the specification of a replication controller.

FIELDS:
   minReadySeconds	<integer>
     Minimum number of seconds for which a newly created pod should be ready
     without any of its container crashing, for it to be considered available.
     Defaults to 0 (pod will be considered available as soon as it is ready)

   replicas	<integer>
     Replicas is the number of desired replicas. This is a pointer to
     distinguish between explicit zero and unspecified. Defaults to 1. More
     info:
     https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller

   selector	<map[string]string>
     Selector is a label query over pods that should match the Replicas count.
     If Selector is empty, it is defaulted to the labels present on the Pod
     template. Label keys and values that must match in order to be controlled
     by this replication controller, if empty defaulted to labels on Pod
     template. More info:
     https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors

   template	<Object>
     Template is the object that describes the pod that will be created if
     insufficient replicas are detected. This takes precedence over a
     TemplateRef. More info:
     https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template

KIND:     ResourceQuota
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the desired quota.
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     ResourceQuotaSpec defines the desired hard limits to enforce for Quota.

FIELDS:
   hard	<map[string]string>
     hard is the set of desired hard limits for each named resource. More info:
     https://kubernetes.io/docs/concepts/policy/resource-quotas/

   scopeSelector	<Object>
     scopeSelector is also a collection of filters like scopes that must match
     each object tracked by a quota but expressed using ScopeSelectorOperator in
     combination with possible values. For a resource to match, both scopes AND
     scopeSelector (if specified in spec), must be matched.

   scopes	<[]string>
     A collection of filters that must match each object tracked by a quota. If
     not specified, the quota matches all objects.

KIND:     Service
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the behavior of a service.
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     ServiceSpec describes the attributes that a user creates on a service.

FIELDS:
   allocateLoadBalancerNodePorts	<boolean>
     allocateLoadBalancerNodePorts defines if NodePorts will be automatically
     allocated for services with type LoadBalancer. Default is "true". It may be
     set to "false" if the cluster load-balancer does not rely on NodePorts.
     allocateLoadBalancerNodePorts may only be set for services with type
     LoadBalancer and will be cleared if the type is changed to any other type.
     This field is alpha-level and is only honored by servers that enable the
     ServiceLBNodePortControl feature.

   clusterIP	<string>
     clusterIP is the IP address of the service and is usually assigned
     randomly. If an address is specified manually, is in-range (as per system
     configuration), and is not in use, it will be allocated to the service;
     otherwise creation of the service will fail. This field may not be changed
     through updates unless the type field is also being changed to ExternalName
     (which requires this field to be blank) or the type field is being changed
     from ExternalName (in which case this field may optionally be specified, as
     describe above). Valid values are "None", empty string (""), or a valid IP
     address. Setting this to "None" makes a "headless service" (no virtual IP),
     which is useful when direct endpoint connections are preferred and proxying
     is not required. Only applies to types ClusterIP, NodePort, and
     LoadBalancer. If this field is specified when creating a Service of type
     ExternalName, creation will fail. This field will be wiped when updating a
     Service to type ExternalName. More info:
     https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies

   clusterIPs	<[]string>
     ClusterIPs is a list of IP addresses assigned to this service, and are
     usually assigned randomly. If an address is specified manually, is in-range
     (as per system configuration), and is not in use, it will be allocated to
     the service; otherwise creation of the service will fail. This field may
     not be changed through updates unless the type field is also being changed
     to ExternalName (which requires this field to be empty) or the type field
     is being changed from ExternalName (in which case this field may optionally
     be specified, as describe above). Valid values are "None", empty string
     (""), or a valid IP address. Setting this to "None" makes a "headless
     service" (no virtual IP), which is useful when direct endpoint connections
     are preferred and proxying is not required. Only applies to types
     ClusterIP, NodePort, and LoadBalancer. If this field is specified when
     creating a Service of type ExternalName, creation will fail. This field
     will be wiped when updating a Service to type ExternalName. If this field
     is not specified, it will be initialized from the clusterIP field. If this
     field is specified, clients must ensure that clusterIPs[0] and clusterIP
     have the same value.

     Unless the "IPv6DualStack" feature gate is enabled, this field is limited
     to one value, which must be the same as the clusterIP field. If the feature
     gate is enabled, this field may hold a maximum of two entries (dual-stack
     IPs, in either order). These IPs must correspond to the values of the
     ipFamilies field. Both clusterIPs and ipFamilies are governed by the
     ipFamilyPolicy field. More info:
     https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies

   externalIPs	<[]string>
     externalIPs is a list of IP addresses for which nodes in the cluster will
     also accept traffic for this service. These IPs are not managed by
     Kubernetes. The user is responsible for ensuring that traffic arrives at a
     node with this IP. A common example is external load-balancers that are not
     part of the Kubernetes system.

   externalName	<string>
     externalName is the external reference that discovery mechanisms will
     return as an alias for this service (e.g. a DNS CNAME record). No proxying
     will be involved. Must be a lowercase RFC-1123 hostname
     (https://tools.ietf.org/html/rfc1123) and requires Type to be

   externalTrafficPolicy	<string>
     externalTrafficPolicy denotes if this Service desires to route external
     traffic to node-local or cluster-wide endpoints. "Local" preserves the
     client source IP and avoids a second hop for LoadBalancer and Nodeport type
     services, but risks potentially imbalanced traffic spreading. "Cluster"
     obscures the client source IP and may cause a second hop to another node,
     but should have good overall load-spreading.

   healthCheckNodePort	<integer>
     healthCheckNodePort specifies the healthcheck nodePort for the service.
     This only applies when type is set to LoadBalancer and
     externalTrafficPolicy is set to Local. If a value is specified, is
     in-range, and is not in use, it will be used. If not specified, a value
     will be automatically allocated. External systems (e.g. load-balancers) can
     use this port to determine if a given node holds endpoints for this service
     or not. If this field is specified when creating a Service which does not
     need it, creation will fail. This field will be wiped when updating a
     Service to no longer need it (e.g. changing type).

   ipFamilies	<[]string>
     IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
     service, and is gated by the "IPv6DualStack" feature gate. This field is
     usually assigned automatically based on cluster configuration and the
     ipFamilyPolicy field. If this field is specified manually, the requested
     family is available in the cluster, and ipFamilyPolicy allows it, it will
     be used; otherwise creation of the service will fail. This field is
     conditionally mutable: it allows for adding or removing a secondary IP
     family, but it does not allow changing the primary IP family of the
     Service. Valid values are "IPv4" and "IPv6". This field only applies to
     Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to
     "headless" services. This field will be wiped when updating a Service to
     type ExternalName.

     This field may hold a maximum of two entries (dual-stack families, in
     either order). These families must correspond to the values of the
     clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed
     by the ipFamilyPolicy field.

   ipFamilyPolicy	<string>
     IPFamilyPolicy represents the dual-stack-ness requested or required by this
     Service, and is gated by the "IPv6DualStack" feature gate. If there is no
     value provided, then this field will be set to SingleStack. Services can be
     "SingleStack" (a single IP family), "PreferDualStack" (two IP families on
     dual-stack configured clusters or a single IP family on single-stack
     clusters), or "RequireDualStack" (two IP families on dual-stack configured
     clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on
     the value of this field. This field will be wiped when updating a service
     to type ExternalName.

   loadBalancerIP	<string>
     Only applies to Service Type: LoadBalancer LoadBalancer will get created
     with the IP specified in this field. This feature depends on whether the
     underlying cloud-provider supports specifying the loadBalancerIP when a
     load balancer is created. This field will be ignored if the cloud-provider
     does not support the feature.

   loadBalancerSourceRanges	<[]string>
     If specified and supported by the platform, this will restrict traffic
     through the cloud-provider load-balancer will be restricted to the
     specified client IPs. This field will be ignored if the cloud-provider does
     not support the feature." More info:
     https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/

   ports	<[]Object>
     The list of ports that are exposed by this service. More info:
     https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies

   publishNotReadyAddresses	<boolean>
     publishNotReadyAddresses indicates that any agent which deals with
     endpoints for this Service should disregard any indications of
     ready/not-ready. The primary use case for setting this field is for a
     StatefulSet's Headless Service to propagate SRV DNS records for its Pods
     for the purpose of peer discovery. The Kubernetes controllers that generate
     Endpoints and EndpointSlice resources for Services interpret this to mean
     that all endpoints are considered "ready" even if the Pods themselves are
     not. Agents which consume only Kubernetes generated endpoints through the
     Endpoints or EndpointSlice resources can safely assume this behavior.

   selector	<map[string]string>
     Route service traffic to pods with label keys and values matching this
     selector. If empty or not present, the service is assumed to have an
     external process managing its endpoints, which Kubernetes will not modify.
     Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if
     type is ExternalName. More info:
     https://kubernetes.io/docs/concepts/services-networking/service/

   sessionAffinity	<string>
     Supports "ClientIP" and "None". Used to maintain session affinity. Enable
     client IP based session affinity. Must be ClientIP or None. Defaults to
     None. More info:
     https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies

   sessionAffinityConfig	<Object>
     sessionAffinityConfig contains the configurations of session affinity.

   topologyKeys	<[]string>
     topologyKeys is a preference-order list of topology keys which
     implementations of services should use to preferentially sort endpoints
     when accessing this Service, it can not be used at the same time as
     externalTrafficPolicy=Local. Topology keys must be valid label keys and at
     most 16 keys may be specified. Endpoints are chosen based on the first
     topology key with available backends. If this field is specified and all
     entries have no backends that match the topology of the client, the service
     has no backends for that client and connections should fail. The special
     value "*" may be used to mean "any topology". This catch-all value, if
     used, only makes sense as the last value in the list. If this is not
     specified or empty, no topology constraints will be applied. This field is
     alpha-level and is only honored by servers that enable the ServiceTopology
     feature.

   type	<string>
     type determines how the Service is exposed. Defaults to ClusterIP. Valid
     options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
     "ClusterIP" allocates a cluster-internal IP address for load-balancing to
     endpoints. Endpoints are determined by the selector or if that is not
     specified, by manual construction of an Endpoints object or EndpointSlice
     objects. If clusterIP is "None", no virtual IP is allocated and the
     endpoints are published as a set of endpoints rather than a virtual IP.
     "NodePort" builds on ClusterIP and allocates a port on every node which
     routes to the same endpoints as the clusterIP. "LoadBalancer" builds on
     NodePort and creates an external load-balancer (if supported in the current
     cloud) which routes to the same endpoints as the clusterIP. "ExternalName"
     aliases this service to the specified externalName. Several other fields do
     not apply to ExternalName services. More info:
     https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types

KIND:     CustomResourceDefinition
VERSION:  apiextensions.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     spec describes how the user wants the resources to appear

     CustomResourceDefinitionSpec describes how a user wants their resource to
     appear

FIELDS:
   conversion	<Object>
     conversion defines conversion settings for the CRD.

   group	<string> -required-
     group is the API group of the defined custom resource. The custom resources
     are served under `/apis/<group>/...`. Must match the name of the
     CustomResourceDefinition (in the form `<names.plural>.<group>`).

   names	<Object> -required-
     names specify the resource and kind names for the custom resource.

   preserveUnknownFields	<boolean>
     preserveUnknownFields indicates that object fields which are not specified
     in the OpenAPI schema should be preserved when persisting to storage.
     apiVersion, kind, metadata and known fields inside metadata are always
     preserved. This field is deprecated in favor of setting
     `x-preserve-unknown-fields` to true in
     `spec.versions[*].schema.openAPIV3Schema`. See
     https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields
     for details.

   scope	<string> -required-
     scope indicates whether the defined custom resource is cluster- or
     namespace-scoped. Allowed values are `Cluster` and `Namespaced`.

   versions	<[]Object> -required-
     versions is the list of all API versions of the defined custom resource.
     Version names are used to compute the order in which served versions are
     listed in API discovery. If the version string is "kube-like", it will sort
     above non "kube-like" version strings, which are ordered lexicographically.
     "Kube-like" versions start with a "v", then are followed by a number (the
     major version), then optionally the string "alpha" or "beta" and another
     number (the minor version). These are sorted first by GA > beta > alpha
     (where GA is a version with no suffix such as beta or alpha), and then by
     comparing major version, then minor version. An example sorted list of
     versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2,
     foo1, foo10.

KIND:     APIService
VERSION:  apiregistration.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec contains information for locating and communicating with a server

     APIServiceSpec contains information for locating and communicating with a
     server. Only https is supported, though you are able to disable certificate
     verification.

FIELDS:
   caBundle	<string>
     CABundle is a PEM encoded CA bundle which will be used to validate an API
     server's serving certificate. If unspecified, system trust roots on the
     apiserver are used.

   group	<string>
     Group is the API group name this server hosts

   groupPriorityMinimum	<integer> -required-
     GroupPriorityMininum is the priority this group should have at least.
     Higher priority means that the group is preferred by clients over lower
     priority ones. Note that other versions of this group might specify even
     higher GroupPriorityMininum values such that the whole group gets a higher
     priority. The primary sort is based on GroupPriorityMinimum, ordered
     highest number to lowest (20 before 10). The secondary sort is based on the
     alphabetical comparison of the name of the object. (v1.bar before v1.foo)
     We'd recommend something like: *.k8s.io (except extensions) at 18000 and
     PaaSes (OpenShift, Deis) are recommended to be in the 2000s

   insecureSkipTLSVerify	<boolean>
     InsecureSkipTLSVerify disables TLS certificate verification when
     communicating with this server. This is strongly discouraged. You should
     use the CABundle instead.

   service	<Object>
     Service is a reference to the service for this API server. It must
     communicate on port 443. If the Service is nil, that means the handling for
     the API groupversion is handled locally on this server. The call will
     simply delegate to the normal handler chain to be fulfilled.

   version	<string>
     Version is the API version this server hosts. For example, "v1"

   versionPriority	<integer> -required-
     VersionPriority controls the ordering of this API version inside of its
     group. Must be greater than zero. The primary sort is based on
     VersionPriority, ordered highest to lowest (20 before 10). Since it's
     inside of a group, the number can be small, probably in the 10s. In case of
     equal version priorities, the version string will be used to compute the
     order inside a group. If the version string is "kube-like", it will sort
     above non "kube-like" version strings, which are ordered lexicographically.
     "Kube-like" versions start with a "v", then are followed by a number (the
     major version), then optionally the string "alpha" or "beta" and another
     number (the minor version). These are sorted first by GA > beta > alpha
     (where GA is a version with no suffix such as beta or alpha), and then by
     comparing major version, then minor version. An example sorted list of
     versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2,
     foo1, foo10.

KIND:     DaemonSet
VERSION:  apps/v1

RESOURCE: spec <Object>

DESCRIPTION:
     The desired behavior of this daemon set. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     DaemonSetSpec is the specification of a daemon set.

FIELDS:
   minReadySeconds	<integer>
     The minimum number of seconds for which a newly created DaemonSet pod
     should be ready without any of its container crashing, for it to be
     considered available. Defaults to 0 (pod will be considered available as
     soon as it is ready).

   revisionHistoryLimit	<integer>
     The number of old history to retain to allow rollback. This is a pointer to
     distinguish between explicit zero and not specified. Defaults to 10.

   selector	<Object> -required-
     A label query over pods that are managed by the daemon set. Must match in
     order to be controlled. It must match the pod template's labels. More info:
     https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors

   template	<Object> -required-
     An object that describes the pod that will be created. The DaemonSet will
     create exactly one copy of this pod on every node that matches the
     template's node selector (or on every node if no node selector is
     specified). More info:
     https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template

   updateStrategy	<Object>
     An update strategy to replace existing DaemonSet pods with new pods.

KIND:     Deployment
VERSION:  apps/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of the Deployment.

     DeploymentSpec is the specification of the desired behavior of the
     Deployment.

FIELDS:
   minReadySeconds	<integer>
     Minimum number of seconds for which a newly created pod should be ready
     without any of its container crashing, for it to be considered available.
     Defaults to 0 (pod will be considered available as soon as it is ready)

   paused	<boolean>
     Indicates that the deployment is paused.

   progressDeadlineSeconds	<integer>
     The maximum time in seconds for a deployment to make progress before it is
     considered to be failed. The deployment controller will continue to process
     failed deployments and a condition with a ProgressDeadlineExceeded reason
     will be surfaced in the deployment status. Note that progress will not be
     estimated during the time a deployment is paused. Defaults to 600s.

   replicas	<integer>
     Number of desired pods. This is a pointer to distinguish between explicit
     zero and not specified. Defaults to 1.

   revisionHistoryLimit	<integer>
     The number of old ReplicaSets to retain to allow rollback. This is a
     pointer to distinguish between explicit zero and not specified. Defaults to
     10.

   selector	<Object> -required-
     Label selector for pods. Existing ReplicaSets whose pods are selected by
     this will be the ones affected by this deployment. It must match the pod
     template's labels.

   strategy	<Object>
     The deployment strategy to use to replace existing pods with new ones.

   template	<Object> -required-
     Template describes the pods that will be created.

KIND:     ReplicaSet
VERSION:  apps/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the specification of the desired behavior of the ReplicaSet.
     More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     ReplicaSetSpec is the specification of a ReplicaSet.

FIELDS:
   minReadySeconds	<integer>
     Minimum number of seconds for which a newly created pod should be ready
     without any of its container crashing, for it to be considered available.
     Defaults to 0 (pod will be considered available as soon as it is ready)

   replicas	<integer>
     Replicas is the number of desired replicas. This is a pointer to
     distinguish between explicit zero and unspecified. Defaults to 1. More
     info:
     https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller

   selector	<Object> -required-
     Selector is a label query over pods that should match the replica count.
     Label keys and values that must match in order to be controlled by this
     replica set. It must match the pod template's labels. More info:
     https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors

   template	<Object>
     Template is the object that describes the pod that will be created if
     insufficient replicas are detected. More info:
     https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template

KIND:     StatefulSet
VERSION:  apps/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the desired identities of pods in this set.

     A StatefulSetSpec is the specification of a StatefulSet.

FIELDS:
   podManagementPolicy	<string>
     podManagementPolicy controls how pods are created during initial scale up,
     when replacing pods on nodes, or when scaling down. The default policy is
     `OrderedReady`, where pods are created in increasing order (pod-0, then
     pod-1, etc) and the controller will wait until each pod is ready before
     continuing. When scaling down, the pods are removed in the opposite order.
     The alternative policy is `Parallel` which will create pods in parallel to
     match the desired scale without waiting, and on scale down will delete all
     pods at once.

   replicas	<integer>
     replicas is the desired number of replicas of the given Template. These are
     replicas in the sense that they are instantiations of the same Template,
     but individual replicas also have a consistent identity. If unspecified,
     defaults to 1.

   revisionHistoryLimit	<integer>
     revisionHistoryLimit is the maximum number of revisions that will be
     maintained in the StatefulSet's revision history. The revision history
     consists of all revisions not represented by a currently applied
     StatefulSetSpec version. The default value is 10.

   selector	<Object> -required-
     selector is a label query over pods that should match the replica count. It
     must match the pod template's labels. More info:
     https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors

   serviceName	<string> -required-
     serviceName is the name of the service that governs this StatefulSet. This
     service must exist before the StatefulSet, and is responsible for the
     network identity of the set. Pods get DNS/hostnames that follow the
     pattern: pod-specific-string.serviceName.default.svc.cluster.local where
     "pod-specific-string" is managed by the StatefulSet controller.

   template	<Object> -required-
     template is the object that describes the pod that will be created if
     insufficient replicas are detected. Each pod stamped out by the StatefulSet
     will fulfill this Template, but have a unique identity from the rest of the
     StatefulSet.

   updateStrategy	<Object>
     updateStrategy indicates the StatefulSetUpdateStrategy that will be
     employed to update Pods in the StatefulSet when a revision is made to
     Template.

   volumeClaimTemplates	<[]Object>
     volumeClaimTemplates is a list of claims that pods are allowed to
     reference. The StatefulSet controller is responsible for mapping network
     identities to claims in a way that maintains the identity of a pod. Every
     claim in this list must have at least one matching (by name) volumeMount in
     one container in the template. A claim in this list takes precedence over
     any volumes in the template, with the same name.

KIND:     Application
VERSION:  argoproj.io/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     ApplicationSpec represents desired application state. Contains link to
     repository with application definition and additional parameters link
     definition revision.

FIELDS:
   destination	<Object> -required-
     Destination is a reference to the target Kubernetes server and namespace

   ignoreDifferences	<[]Object>
     IgnoreDifferences is a list of resources and their fields which should be
     ignored during comparison

   info	<[]Object>
     Info contains a list of information (URLs, email addresses, and plain text)
     that relates to the application

   project	<string> -required-
     Project is a reference to the project this application belongs to. The
     empty string means that application belongs to the 'default' project.

   revisionHistoryLimit	<integer>
     RevisionHistoryLimit limits the number of items kept in the application's
     revision history, which is used for informational purposes as well as for
     rollbacks to previous versions. This should only be changed in exceptional
     circumstances. Setting to zero will store no history. This will reduce
     storage used. Increasing will increase the space used to store the history,
     so we do not recommend increasing it. Default is 10.

   source	<Object>
     Source is a reference to the location of the application's manifests or
     chart

   sources	<[]Object>
     Sources is a reference to the location of the application's manifests or
     chart

   syncPolicy	<Object>
     SyncPolicy controls when and how a sync will be performed

KIND:     ApplicationSet
VERSION:  argoproj.io/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     <empty>

FIELDS:
   applyNestedSelectors	<boolean>

   generators	<[]Object> -required-

   goTemplate	<boolean>

   goTemplateOptions	<[]string>

   preservedFields	<Object>

   strategy	<Object>

   syncPolicy	<Object>

   template	<Object> -required-

KIND:     AppProject
VERSION:  argoproj.io/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     AppProjectSpec is the specification of an AppProject

FIELDS:
   clusterResourceBlacklist	<[]Object>
     ClusterResourceBlacklist contains list of blacklisted cluster level
     resources

   clusterResourceWhitelist	<[]Object>
     ClusterResourceWhitelist contains list of whitelisted cluster level
     resources

   description	<string>
     Description contains optional project description

   destinations	<[]Object>
     Destinations contains list of destinations available for deployment

   namespaceResourceBlacklist	<[]Object>
     NamespaceResourceBlacklist contains list of blacklisted namespace level
     resources

   namespaceResourceWhitelist	<[]Object>
     NamespaceResourceWhitelist contains list of whitelisted namespace level
     resources

   orphanedResources	<Object>
     OrphanedResources specifies if controller should monitor orphaned resources
     of apps in this project

   permitOnlyProjectScopedClusters	<boolean>
     PermitOnlyProjectScopedClusters determines whether destinations can only
     reference clusters which are project-scoped

   roles	<[]Object>
     Roles are user defined RBAC roles associated with this project

   signatureKeys	<[]Object>
     SignatureKeys contains a list of PGP key IDs that commits in Git must be
     signed with in order to be allowed for sync

   sourceNamespaces	<[]string>
     SourceNamespaces defines the namespaces application resources are allowed
     to be created in

   sourceRepos	<[]string>
     SourceRepos contains list of repository URLs which can be used for
     deployment

   syncWindows	<[]Object>
     SyncWindows controls when syncs can be run for apps in this project

KIND:     ArgoCDExtension
VERSION:  argoproj.io/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     ArgoCDExtensionSpec defines the desired state of ArgoCDExtension

FIELDS:
   sources	<[]Object> -required-
     Sources specifies where the extension should come from

KIND:     TokenReview
VERSION:  authentication.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec holds information about the request being evaluated

     TokenReviewSpec is a description of the token authentication request.

FIELDS:
   audiences	<[]string>
     Audiences is a list of the identifiers that the resource server presented
     with the token identifies as. Audience-aware token authenticators will
     verify that the token was intended for at least one of the audiences in
     this list. If no audiences are provided, the audience will default to the
     audience of the Kubernetes apiserver.

   token	<string>
     Token is the opaque bearer token.

KIND:     LocalSubjectAccessReview
VERSION:  authorization.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec holds information about the request being evaluated. spec.namespace
     must be equal to the namespace you made the request against. If empty, it
     is defaulted.

     SubjectAccessReviewSpec is a description of the access request. Exactly one
     of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes
     must be set

FIELDS:
   extra	<map[string][]string>
     Extra corresponds to the user.Info.GetExtra() method from the
     authenticator. Since that is input to the authorizer it needs a reflection
     here.

   groups	<[]string>
     Groups is the groups you're testing for.

   nonResourceAttributes	<Object>
     NonResourceAttributes describes information for a non-resource access
     request

   resourceAttributes	<Object>
     ResourceAuthorizationAttributes describes information for a resource access
     request

   uid	<string>
     UID information about the requesting user.

   user	<string>
     User is the user you're testing for. If you specify "User" but not
     "Groups", then is it interpreted as "What if User were not a member of any
     groups

KIND:     SelfSubjectAccessReview
VERSION:  authorization.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec holds information about the request being evaluated. user and groups
     must be empty

     SelfSubjectAccessReviewSpec is a description of the access request. Exactly
     one of ResourceAuthorizationAttributes and
     NonResourceAuthorizationAttributes must be set

FIELDS:
   nonResourceAttributes	<Object>
     NonResourceAttributes describes information for a non-resource access
     request

   resourceAttributes	<Object>
     ResourceAuthorizationAttributes describes information for a resource access
     request

KIND:     SelfSubjectRulesReview
VERSION:  authorization.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec holds information about the request being evaluated.

FIELDS:
   namespace	<string>
     Namespace to evaluate rules for. Required.

KIND:     SubjectAccessReview
VERSION:  authorization.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec holds information about the request being evaluated

     SubjectAccessReviewSpec is a description of the access request. Exactly one
     of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes
     must be set

FIELDS:
   extra	<map[string][]string>
     Extra corresponds to the user.Info.GetExtra() method from the
     authenticator. Since that is input to the authorizer it needs a reflection
     here.

   groups	<[]string>
     Groups is the groups you're testing for.

   nonResourceAttributes	<Object>
     NonResourceAttributes describes information for a non-resource access
     request

   resourceAttributes	<Object>
     ResourceAuthorizationAttributes describes information for a resource access
     request

   uid	<string>
     UID information about the requesting user.

   user	<string>
     User is the user you're testing for. If you specify "User" but not
     "Groups", then is it interpreted as "What if User were not a member of any
     groups

KIND:     HorizontalPodAutoscaler
VERSION:  autoscaling/v1

RESOURCE: spec <Object>

DESCRIPTION:
     behaviour of autoscaler. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.

     specification of a horizontal pod autoscaler.

FIELDS:
   maxReplicas	<integer> -required-
     upper limit for the number of pods that can be set by the autoscaler;
     cannot be smaller than MinReplicas.

   minReplicas	<integer>
     minReplicas is the lower limit for the number of replicas to which the
     autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to
     be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one
     Object or External metric is configured. Scaling is active as long as at
     least one metric value is available.

   scaleTargetRef	<Object> -required-
     reference to scaled resource; horizontal pod autoscaler will learn the
     current resource consumption and will set the desired number of pods by
     using its Scale subresource.

   targetCPUUtilizationPercentage	<integer>
     target average CPU utilization (represented as a percentage of requested
     CPU) over all the pods; if not specified the default autoscaling policy
     will be used.

KIND:     CronJob
VERSION:  batch/v1beta1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of a cron job, including the
     schedule. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     CronJobSpec describes how the job execution will look like and when it will
     actually run.

FIELDS:
   concurrencyPolicy	<string>
     Specifies how to treat concurrent executions of a Job. Valid values are: -
     "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids
     concurrent runs, skipping next run if previous run hasn't finished yet; -
     "Replace": cancels currently running job and replaces it with a new one

   failedJobsHistoryLimit	<integer>
     The number of failed finished jobs to retain. This is a pointer to
     distinguish between explicit zero and not specified. Defaults to 1.

   jobTemplate	<Object> -required-
     Specifies the job that will be created when executing a CronJob.

   schedule	<string> -required-
     The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.

   startingDeadlineSeconds	<integer>
     Optional deadline in seconds for starting the job if it misses scheduled
     time for any reason. Missed jobs executions will be counted as failed ones.

   successfulJobsHistoryLimit	<integer>
     The number of successful finished jobs to retain. This is a pointer to
     distinguish between explicit zero and not specified. Defaults to 3.

   suspend	<boolean>
     This flag tells the controller to suspend subsequent executions, it does
     not apply to already started executions. Defaults to false.

KIND:     Job
VERSION:  batch/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of a job. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     JobSpec describes how the job execution will look like.

FIELDS:
   activeDeadlineSeconds	<integer>
     Specifies the duration in seconds relative to the startTime that the job
     may be active before the system tries to terminate it; value must be
     positive integer

   backoffLimit	<integer>
     Specifies the number of retries before marking this job failed. Defaults to
     6

   completions	<integer>
     Specifies the desired number of successfully finished pods the job should
     be run with. Setting to nil means that the success of any pod signals the
     success of all pods, and allows parallelism to have any positive value.
     Setting to 1 means that parallelism is limited to 1 and the success of that
     pod signals the success of the job. More info:
     https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/

   manualSelector	<boolean>
     manualSelector controls generation of pod labels and pod selectors. Leave
     `manualSelector` unset unless you are certain what you are doing. When
     false or unset, the system pick labels unique to this job and appends those
     labels to the pod template. When true, the user is responsible for picking
     unique labels and specifying the selector. Failure to pick a unique label
     may cause this and other jobs to not function correctly. However, You may
     see `manualSelector=true` in jobs that were created with the old
     `extensions/v1beta1` API. More info:
     https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector

   parallelism	<integer>
     Specifies the maximum desired number of pods the job should run at any
     given time. The actual number of pods running in steady state will be less
     than this number when ((.spec.completions - .status.successful) <
     .spec.parallelism), i.e. when the work left to do is less than max
     parallelism. More info:
     https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/

   selector	<Object>
     A label query over pods that should match the pod count. Normally, the
     system sets this field for you. More info:
     https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors

   template	<Object> -required-
     Describes the pod that will be created when executing a job. More info:
     https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/

   ttlSecondsAfterFinished	<integer>
     ttlSecondsAfterFinished limits the lifetime of a Job that has finished
     execution (either Complete or Failed). If this field is set,
     ttlSecondsAfterFinished after the Job finishes, it is eligible to be
     automatically deleted. When the Job is being deleted, its lifecycle
     guarantees (e.g. finalizers) will be honored. If this field is unset, the
     Job won't be automatically deleted. If this field is set to zero, the Job
     becomes eligible to be deleted immediately after it finishes. This field is
     alpha-level and is only honored by servers that enable the TTLAfterFinished
     feature.

KIND:     CertificateSigningRequest
VERSION:  certificates.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     spec contains the certificate request, and is immutable after creation.
     Only the request, signerName, and usages fields can be set on creation.
     Other fields are derived by Kubernetes and cannot be modified by users.

     CertificateSigningRequestSpec contains the certificate request.

FIELDS:
   extra	<map[string][]string>
     extra contains extra attributes of the user that created the
     CertificateSigningRequest. Populated by the API server on creation and
     immutable.

   groups	<[]string>
     groups contains group membership of the user that created the
     CertificateSigningRequest. Populated by the API server on creation and
     immutable.

   request	<string> -required-
     request contains an x509 certificate signing request encoded in a
     "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data
     is additionally base64-encoded.

   signerName	<string> -required-
     signerName indicates the requested signer, and is a qualified name.
     List/watch requests for CertificateSigningRequests can filter on this field
     using a "spec.signerName=NAME" fieldSelector.

     Well-known Kubernetes signers are:
     1. "kubernetes.io/kube-apiserver-client": issues client certificates that
     can be used to authenticate to kube-apiserver. Requests for this signer are
     never auto-approved by kube-controller-manager, can be issued by the
     "csrsigning" controller in kube-controller-manager.
     2. "kubernetes.io/kube-apiserver-client-kubelet": issues client
     certificates that kubelets use to authenticate to kube-apiserver. Requests
     for this signer can be auto-approved by the "csrapproving" controller in
     kube-controller-manager, and can be issued by the "csrsigning" controller
     in kube-controller-manager.
     3. "kubernetes.io/kubelet-serving" issues serving certificates that
     kubelets use to serve TLS endpoints, which kube-apiserver can connect to
     securely. Requests for this signer are never auto-approved by
     kube-controller-manager, and can be issued by the "csrsigning" controller
     in kube-controller-manager.

     More details are available at
     https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers

     Custom signerNames can also be specified. The signer defines:
     1. Trust distribution: how trust (CA bundles) are distributed.
     2. Permitted subjects: and behavior when a disallowed subject is requested.
     3. Required, permitted, or forbidden x509 extensions in the request
     (including whether subjectAltNames are allowed, which types, restrictions
     on allowed values) and behavior when a disallowed extension is requested.
     4. Required, permitted, or forbidden key usages / extended key usages.
     5. Expiration/certificate lifetime: whether it is fixed by the signer,
     configurable by the admin.
     6. Whether or not requests for CA certificates are allowed.

   uid	<string>
     uid contains the uid of the user that created the
     CertificateSigningRequest. Populated by the API server on creation and
     immutable.

   usages	<[]string>
     usages specifies a set of key usages requested in the issued certificate.
     Requests for TLS client certificates typically request: "digital
     signature", "key encipherment", "client auth".

     Requests for TLS serving certificates typically request: "key
     encipherment", "digital signature", "server auth".

     Valid values are:
     "signing", "digital signature", "content commitment", "key encipherment",
     "key agreement", "data encipherment", "cert sign", "crl sign", "encipher
     only", "decipher only", "any", "server auth", "client auth", "code
     signing", "email protection", "s/mime", "ipsec end system", "ipsec tunnel",
     "ipsec user", "timestamping", "ocsp signing", "microsoft sgc", "netscape
     sgc"

   username	<string>
     username contains the name of the user that created the
     CertificateSigningRequest. Populated by the API server on creation and
     immutable.

KIND:     Lease
VERSION:  coordination.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the Lease. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     LeaseSpec is a specification of a Lease.

FIELDS:
   acquireTime	<string>
     acquireTime is a time when the current lease was acquired.

   holderIdentity	<string>
     holderIdentity contains the identity of the holder of a current lease.

   leaseDurationSeconds	<integer>
     leaseDurationSeconds is a duration that candidates for a lease need to wait
     to force acquire it. This is measure against time of last observed
     RenewTime.

   leaseTransitions	<integer>
     leaseTransitions is the number of transitions of a lease between holders.

   renewTime	<string>
     renewTime is a time when the current holder of a lease has last updated the
     lease.

KIND:     BGPConfiguration
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     BGPConfigurationSpec contains the values of the BGP configuration.

FIELDS:
   asNumber	<integer>
     ASNumber is the default AS number used by a node. [Default: 64512]

   communities	<[]Object>
     Communities is a list of BGP community values and their arbitrary names for
     tagging routes.

   listenPort	<integer>
     ListenPort is the port where BGP protocol should listen. Defaults to 179

   logSeverityScreen	<string>
     LogSeverityScreen is the log severity above which logs are sent to the
     stdout. [Default: INFO]

   nodeToNodeMeshEnabled	<boolean>
     NodeToNodeMeshEnabled sets whether full node to node BGP mesh is enabled.
     [Default: true]

   prefixAdvertisements	<[]Object>
     PrefixAdvertisements contains per-prefix advertisement configuration.

   serviceClusterIPs	<[]Object>
     ServiceClusterIPs are the CIDR blocks from which service cluster IPs are
     allocated. If specified, Calico will advertise these blocks, as well as any
     cluster IPs within them.

   serviceExternalIPs	<[]Object>
     ServiceExternalIPs are the CIDR blocks for Kubernetes Service External IPs.
     Kubernetes Service ExternalIPs will only be advertised if they are within
     one of these blocks.

KIND:     BGPPeer
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     BGPPeerSpec contains the specification for a BGPPeer resource.

FIELDS:
   asNumber	<integer>
     The AS Number of the peer.

   keepOriginalNextHop	<boolean>
     Option to keep the original nexthop field when routes are sent to a BGP
     Peer. Setting "true" configures the selected BGP Peers node to use the
     "next hop keep;" instead of "next hop self;"(default) in the specific
     branch of the Node on "bird.cfg".

   node	<string>
     The node name identifying the Calico node instance that is targeted by this
     peer. If this is not set, and no nodeSelector is specified, then this BGP
     peer selects all nodes in the cluster.

   nodeSelector	<string>
     Selector for the nodes that should have this peering. When this is set, the
     Node field must be empty.

   password	<Object>
     Optional BGP password for the peerings generated by this BGPPeer resource.

   peerIP	<string>
     The IP address of the peer followed by an optional port number to peer
     with. If port number is given, format should be `[<IPv6>]:port` or
     `<IPv4>:<port>` for IPv4. If optional port number is not set, and this peer
     IP and ASNumber belongs to a calico/node with ListenPort set in
     BGPConfiguration, then we use that port to peer.

   peerSelector	<string>
     Selector for the remote nodes to peer with. When this is set, the PeerIP
     and ASNumber fields must be empty. For each peering between the local node
     and selected remote nodes, we configure an IPv4 peering if both ends have
     NodeBGPSpec.IPv4Address specified, and an IPv6 peering if both ends have
     NodeBGPSpec.IPv6Address specified. The remote AS number comes from the
     remote node's NodeBGPSpec.ASNumber, or the global default if that is not
     set.

KIND:     BlockAffinity
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     BlockAffinitySpec contains the specification for a BlockAffinity resource.

FIELDS:
   cidr	<string> -required-

   deleted	<string> -required-
     Deleted indicates that this block affinity is being deleted. This field is
     a string for compatibility with older releases that mistakenly treat this
     field as a string.

   node	<string> -required-

   state	<string> -required-

KIND:     ClusterInformation
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     ClusterInformationSpec contains the values of describing the cluster.

FIELDS:
   calicoVersion	<string>
     CalicoVersion is the version of Calico that the cluster is running

   clusterGUID	<string>
     ClusterGUID is the GUID of the cluster

   clusterType	<string>
     ClusterType describes the type of the cluster

   datastoreReady	<boolean>
     DatastoreReady is used during significant datastore migrations to signal to
     components such as Felix that it should wait before accessing the
     datastore.

   variant	<string>
     Variant declares which variant of Calico should be active.

KIND:     FelixConfiguration
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     FelixConfigurationSpec contains the values of the Felix configuration.

FIELDS:
   allowIPIPPacketsFromWorkloads	<boolean>
     AllowIPIPPacketsFromWorkloads controls whether Felix will add a rule to
     drop IPIP encapsulated traffic from workloads [Default: false]

   allowVXLANPacketsFromWorkloads	<boolean>
     AllowVXLANPacketsFromWorkloads controls whether Felix will add a rule to
     drop VXLAN encapsulated traffic from workloads [Default: false]

   awsSrcDstCheck	<string>
     Set source-destination-check on AWS EC2 instances. Accepted value must be
     one of "DoNothing", "Enabled" or "Disabled". [Default: DoNothing]

   bpfConnectTimeLoadBalancingEnabled	<boolean>
     BPFConnectTimeLoadBalancingEnabled when in BPF mode, controls whether Felix
     installs the connection-time load balancer. The connect-time load balancer
     is required for the host to be able to reach Kubernetes services and it
     improves the performance of pod-to-service connections. The only reason to
     disable it is for debugging purposes. [Default: true]

   bpfDataIfacePattern	<string>
     BPFDataIfacePattern is a regular expression that controls which interfaces
     Felix should attach BPF programs to in order to catch traffic to/from the
     network. This needs to match the interfaces that Calico workload traffic
     flows over as well as any interfaces that handle incoming traffic to
     nodeports and services from outside the cluster. It should not match the
     workload interfaces (usually named cali...).

   bpfDisableUnprivileged	<boolean>
     BPFDisableUnprivileged, if enabled, Felix sets the
     kernel.unprivileged_bpf_disabled sysctl to disable unprivileged use of BPF.
     This ensures that unprivileged users cannot access Calico's BPF maps and
     cannot insert their own BPF programs to interfere with Calico's. [Default:
     true]

   bpfEnabled	<boolean>
     BPFEnabled, if enabled Felix will use the BPF dataplane. [Default: false]

   bpfExternalServiceMode	<string>
     BPFExternalServiceMode in BPF mode, controls how connections from outside
     the cluster to services (node ports and cluster IPs) are forwarded to
     remote workloads. If set to "Tunnel" then both request and response traffic
     is tunneled to the remote node. If set to "DSR", the request traffic is
     tunneled but the response traffic is sent directly from the remote node. In
     "DSR" mode, the remote node appears to use the IP of the ingress node; this
     requires a permissive L2 network. [Default: Tunnel]

   bpfKubeProxyEndpointSlicesEnabled	<boolean>
     BPFKubeProxyEndpointSlicesEnabled in BPF mode, controls whether Felix's
     embedded kube-proxy accepts EndpointSlices or not.

   bpfKubeProxyIptablesCleanupEnabled	<boolean>
     BPFKubeProxyIptablesCleanupEnabled, if enabled in BPF mode, Felix will
     proactively clean up the upstream Kubernetes kube-proxy's iptables chains.
     Should only be enabled if kube-proxy is not running. [Default: true]

   bpfKubeProxyMinSyncPeriod	<string>
     BPFKubeProxyMinSyncPeriod, in BPF mode, controls the minimum time between
     updates to the dataplane for Felix's embedded kube-proxy. Lower values give
     reduced set-up latency. Higher values reduce Felix CPU usage by batching up
     more work. [Default: 1s]

   bpfLogLevel	<string>
     BPFLogLevel controls the log level of the BPF programs when in BPF
     dataplane mode. One of "Off", "Info", or "Debug". The logs are emitted to
     the BPF trace pipe, accessible with the command `tc exec bpf debug`.
     [Default: Off].

   chainInsertMode	<string>
     ChainInsertMode controls whether Felix hooks the kernel's top-level
     iptables chains by inserting a rule at the top of the chain or by appending
     a rule at the bottom. insert is the safe default since it prevents Calico's
     rules from being bypassed. If you switch to append mode, be sure that the
     other rules in the chains signal acceptance by falling through to the
     Calico rules, otherwise the Calico policy will be bypassed. [Default:
     insert]

   dataplaneDriver	<string>

   debugDisableLogDropping	<boolean>

   debugMemoryProfilePath	<string>

   debugSimulateCalcGraphHangAfter	<string>

   debugSimulateDataplaneHangAfter	<string>

   defaultEndpointToHostAction	<string>
     DefaultEndpointToHostAction controls what happens to traffic that goes from
     a workload endpoint to the host itself (after the traffic hits the endpoint
     egress policy). By default Calico blocks traffic from workload endpoints to
     the host itself with an iptables “DROP” action. If you want to allow
     some or all traffic from endpoint to host, set this parameter to RETURN or
     ACCEPT. Use RETURN if you have your own rules in the iptables “INPUT”
     chain; Calico will insert its rules at the top of that chain, then
     “RETURN” packets to the “INPUT” chain once it has completed
     processing workload endpoint egress policy. Use ACCEPT to unconditionally
     accept packets from workloads after processing workload endpoint egress
     policy. [Default: Drop]

   deviceRouteProtocol	<integer>
     This defines the route protocol added to programmed device routes, by
     default this will be RTPROT_BOOT when left blank.

   deviceRouteSourceAddress	<string>
     This is the source address to use on programmed device routes. By default
     the source address is left blank, leaving the kernel to choose the source
     address used.

   disableConntrackInvalidCheck	<boolean>

   endpointReportingDelay	<string>

   endpointReportingEnabled	<boolean>

   externalNodesList	<[]string>
     ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes
     which may source tunnel traffic and have the tunneled traffic be accepted
     at calico nodes.

   failsafeInboundHostPorts	<[]Object>
     FailsafeInboundHostPorts is a comma-delimited list of UDP/TCP ports that
     Felix will allow incoming traffic to host endpoints on irrespective of the
     security policy. This is useful to avoid accidentally cutting off a host
     with incorrect configuration. Each port should be specified as
     tcp:<port-number> or udp:<port-number>. For back-compatibility, if the
     protocol is not specified, it defaults to “tcp”. To disable all inbound
     host ports, use the value none. The default value allows ssh access and
     DHCP. [Default: tcp:22, udp:68, tcp:179, tcp:2379, tcp:2380, tcp:6443,
     tcp:6666, tcp:6667]

   failsafeOutboundHostPorts	<[]Object>
     FailsafeOutboundHostPorts is a comma-delimited list of UDP/TCP ports that
     Felix will allow outgoing traffic from host endpoints to irrespective of
     the security policy. This is useful to avoid accidentally cutting off a
     host with incorrect configuration. Each port should be specified as
     tcp:<port-number> or udp:<port-number>. For back-compatibility, if the
     protocol is not specified, it defaults to “tcp”. To disable all
     outbound host ports, use the value none. The default value opens etcd's
     standard ports to ensure that Felix does not get cut off from etcd as well
     as allowing DHCP and DNS. [Default: tcp:179, tcp:2379, tcp:2380, tcp:6443,
     tcp:6666, tcp:6667, udp:53, udp:67]

   featureDetectOverride	<string>
     FeatureDetectOverride is used to override the feature detection. Values are
     specified in a comma separated list with no spaces, example;
     "SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=". "true"
     or "false" will force the feature, empty or omitted values are
     auto-detected.

   genericXDPEnabled	<boolean>
     GenericXDPEnabled enables Generic XDP so network cards that don't support
     XDP offload or driver modes can use XDP. This is not recommended since it
     doesn't provide better performance than iptables. [Default: false]

   healthEnabled	<boolean>

   healthHost	<string>

   healthPort	<integer>

   interfaceExclude	<string>
     InterfaceExclude is a comma-separated list of interfaces that Felix should
     exclude when monitoring for host endpoints. The default value ensures that
     Felix ignores Kubernetes' IPVS dummy interface, which is used internally by
     kube-proxy. If you want to exclude multiple interface names using a single
     value, the list supports regular expressions. For regular expressions you
     must wrap the value with '/'. For example having values '/^kube/,veth1'
     will exclude all interfaces that begin with 'kube' and also the interface
     'veth1'. [Default: kube-ipvs0]

   interfacePrefix	<string>
     InterfacePrefix is the interface name prefix that identifies workload
     endpoints and so distinguishes them from host endpoint interfaces. Note: in
     environments other than bare metal, the orchestrators configure this
     appropriately. For example our Kubernetes and Docker integrations set the
     'cali' value, and our OpenStack integration sets the 'tap' value. [Default:
     cali]

   interfaceRefreshInterval	<string>
     InterfaceRefreshInterval is the period at which Felix rescans local
     interfaces to verify their state. The rescan can be disabled by setting the
     interval to 0.

   ipipEnabled	<boolean>

   ipipMTU	<integer>
     IPIPMTU is the MTU to set on the tunnel device. See Configuring MTU
     [Default: 1440]

   ipsetsRefreshInterval	<string>
     IpsetsRefreshInterval is the period at which Felix re-checks all iptables
     state to ensure that no other process has accidentally broken Calico's
     rules. Set to 0 to disable iptables refresh. [Default: 90s]

   iptablesBackend	<string>
     IptablesBackend specifies which backend of iptables will be used. The
     default is legacy.

   iptablesFilterAllowAction	<string>

   iptablesLockFilePath	<string>
     IptablesLockFilePath is the location of the iptables lock file. You may
     need to change this if the lock file is not in its standard location (for
     example if you have mapped it into Felix's container at a different path).
     [Default: /run/xtables.lock]

   iptablesLockProbeInterval	<string>
     IptablesLockProbeInterval is the time that Felix will wait between attempts
     to acquire the iptables lock if it is not available. Lower values make
     Felix more responsive when the lock is contended, but use more CPU.
     [Default: 50ms]

   iptablesLockTimeout	<string>
     IptablesLockTimeout is the time that Felix will wait for the iptables lock,
     or 0, to disable. To use this feature, Felix must share the iptables lock
     file with all other processes that also take the lock. When running Felix
     inside a container, this requires the /run directory of the host to be
     mounted into the calico/node or calico/felix container. [Default: 0s
     disabled]

   iptablesMangleAllowAction	<string>

   iptablesMarkMask	<integer>
     IptablesMarkMask is the mask that Felix selects its IPTables Mark bits
     from. Should be a 32 bit hexadecimal number with at least 8 bits set, none
     of which clash with any other mark bits in use on the system. [Default:
     0xff000000]

   iptablesNATOutgoingInterfaceFilter	<string>

   iptablesPostWriteCheckInterval	<string>
     IptablesPostWriteCheckInterval is the period after Felix has done a write
     to the dataplane that it schedules an extra read back in order to check the
     write was not clobbered by another process. This should only occur if
     another application on the system doesn't respect the iptables lock.
     [Default: 1s]

   iptablesRefreshInterval	<string>
     IptablesRefreshInterval is the period at which Felix re-checks the IP sets
     in the dataplane to ensure that no other process has accidentally broken
     Calico's rules. Set to 0 to disable IP sets refresh. Note: the default for
     this value is lower than the other refresh intervals as a workaround for a
     Linux kernel bug that was fixed in kernel version 4.11. If you are using
     v4.11 or greater you may want to set this to, a higher value to reduce
     Felix CPU usage. [Default: 10s]

   ipv6Support	<boolean>

   kubeNodePortRanges	<[]>
     KubeNodePortRanges holds list of port ranges used for service node ports.
     Only used if felix detects kube-proxy running in ipvs mode. Felix uses
     these ranges to separate host and workload traffic. [Default: 30000:32767].

   logFilePath	<string>
     LogFilePath is the full path to the Felix log. Set to none to disable file
     logging. [Default: /var/log/calico/felix.log]

   logPrefix	<string>
     LogPrefix is the log prefix that Felix uses when rendering LOG rules.
     [Default: calico-packet]

   logSeverityFile	<string>
     LogSeverityFile is the log severity above which logs are sent to the log
     file. [Default: Info]

   logSeverityScreen	<string>
     LogSeverityScreen is the log severity above which logs are sent to the
     stdout. [Default: Info]

   logSeveritySys	<string>
     LogSeveritySys is the log severity above which logs are sent to the syslog.
     Set to None for no logging to syslog. [Default: Info]

   maxIpsetSize	<integer>

   metadataAddr	<string>
     MetadataAddr is the IP address or domain name of the server that can answer
     VM queries for cloud-init metadata. In OpenStack, this corresponds to the
     machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none
     (case insensitive) means that Felix should not set up any NAT rule for the
     metadata path. [Default: 127.0.0.1]

   metadataPort	<integer>
     MetadataPort is the port of the metadata server. This, combined with
     global.MetadataAddr (if not 'None'), is used to set up a NAT rule, from
     169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should
     not need to be changed [Default: 8775].

   mtuIfacePattern	<string>
     MTUIfacePattern is a regular expression that controls which interfaces
     Felix should scan in order to calculate the host's MTU. This should not
     match workload interfaces (usually named cali...).

   natOutgoingAddress	<string>
     NATOutgoingAddress specifies an address to use when performing source NAT
     for traffic in a natOutgoing pool that is leaving the network. By default
     the address used is an address on the interface the traffic is leaving on
     (ie it uses the iptables MASQUERADE target)

   natPortRange	<>
     NATPortRange specifies the range of ports that is used for port mapping
     when doing outgoing NAT. When unset the default behavior of the network
     stack is used.

   netlinkTimeout	<string>

   openstackRegion	<string>
     OpenstackRegion is the name of the region that a particular Felix belongs
     to. In a multi-region Calico/OpenStack deployment, this must be configured
     somehow for each Felix (here in the datamodel, or in felix.cfg or the
     environment on each compute node), and must match the [calico]
     openstack_region value configured in neutron.conf on each node. [Default:
     Empty]

   policySyncPathPrefix	<string>
     PolicySyncPathPrefix is used to by Felix to communicate policy changes to
     external services, like Application layer policy. [Default: Empty]

   prometheusGoMetricsEnabled	<boolean>
     PrometheusGoMetricsEnabled disables Go runtime metrics collection, which
     the Prometheus client does by default, when set to false. This reduces the
     number of metrics reported, reducing Prometheus load. [Default: true]

   prometheusMetricsEnabled	<boolean>
     PrometheusMetricsEnabled enables the Prometheus metrics server in Felix if
     set to true. [Default: false]

   prometheusMetricsHost	<string>
     PrometheusMetricsHost is the host that the Prometheus metrics server should
     bind to. [Default: empty]

   prometheusMetricsPort	<integer>
     PrometheusMetricsPort is the TCP port that the Prometheus metrics server
     should bind to. [Default: 9091]

   prometheusProcessMetricsEnabled	<boolean>
     PrometheusProcessMetricsEnabled disables process metrics collection, which
     the Prometheus client does by default, when set to false. This reduces the
     number of metrics reported, reducing Prometheus load. [Default: true]

   removeExternalRoutes	<boolean>
     Whether or not to remove device routes that have not been programmed by
     Felix. Disabling this will allow external applications to also add device
     routes. This is enabled by default which means we will remove externally
     added routes.

   reportingInterval	<string>
     ReportingInterval is the interval at which Felix reports its status into
     the datastore or 0 to disable. Must be non-zero in OpenStack deployments.
     [Default: 30s]

   reportingTTL	<string>
     ReportingTTL is the time-to-live setting for process-wide status reports.
     [Default: 90s]

   routeRefreshInterval	<string>
     RouteRefreshInterval is the period at which Felix re-checks the routes in
     the dataplane to ensure that no other process has accidentally broken
     Calico's rules. Set to 0 to disable route refresh. [Default: 90s]

   routeSource	<string>
     RouteSource configures where Felix gets its routing information. -
     WorkloadIPs: use workload endpoints to construct routes. - CalicoIPAM: the
     default - use IPAM data to construct routes.

   routeTableRange	<Object>
     Calico programs additional Linux route tables for various purposes.
     RouteTableRange specifies the indices of the route tables that Calico
     should use.

   serviceLoopPrevention	<string>
     When service IP advertisement is enabled, prevent routing loops to service
     IPs that are not in use, by dropping or rejecting packets that do not get
     DNAT'd by kube-proxy. Unless set to "Disabled", in which case such routing
     loops continue to be allowed. [Default: Drop]

   sidecarAccelerationEnabled	<boolean>
     SidecarAccelerationEnabled enables experimental sidecar acceleration
     [Default: false]

   usageReportingEnabled	<boolean>
     UsageReportingEnabled reports anonymous Calico version number and cluster
     size to projectcalico.org. Logs warnings returned by the usage server. For
     example, if a significant security vulnerability has been discovered in the
     version of Calico being used. [Default: true]

   usageReportingInitialDelay	<string>
     UsageReportingInitialDelay controls the minimum delay before Felix makes a
     report. [Default: 300s]

   usageReportingInterval	<string>
     UsageReportingInterval controls the interval at which Felix makes reports.
     [Default: 86400s]

   useInternalDataplaneDriver	<boolean>

   vxlanEnabled	<boolean>

   vxlanMTU	<integer>
     VXLANMTU is the MTU to set on the tunnel device. See Configuring MTU
     [Default: 1440]

   vxlanPort	<integer>

   vxlanVNI	<integer>

   wireguardEnabled	<boolean>
     WireguardEnabled controls whether Wireguard is enabled. [Default: false]

   wireguardInterfaceName	<string>
     WireguardInterfaceName specifies the name to use for the Wireguard
     interface. [Default: wg.calico]

   wireguardListeningPort	<integer>
     WireguardListeningPort controls the listening port used by Wireguard.
     [Default: 51820]

   wireguardMTU	<integer>
     WireguardMTU controls the MTU on the Wireguard interface. See Configuring
     MTU [Default: 1420]

   wireguardRoutingRulePriority	<integer>
     WireguardRoutingRulePriority controls the priority value to use for the
     Wireguard routing rule. [Default: 99]

   xdpEnabled	<boolean>
     XDPEnabled enables XDP acceleration for suitable untracked incoming deny
     rules. [Default: true]

   xdpRefreshInterval	<string>
     XDPRefreshInterval is the period at which Felix re-checks all XDP state to
     ensure that no other process has accidentally broken Calico's BPF maps or
     attached programs. Set to 0 to disable XDP refresh. [Default: 90s]

KIND:     GlobalNetworkPolicy
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     <empty>

FIELDS:
   applyOnForward	<boolean>
     ApplyOnForward indicates to apply the rules in this policy on forward
     traffic.

   doNotTrack	<boolean>
     DoNotTrack indicates whether packets matched by the rules in this policy
     should go through the data plane's connection tracking, such as Linux
     conntrack. If True, the rules in this policy are applied before any data
     plane connection tracking, and packets allowed by this policy are marked as
     not to be tracked.

   egress	<[]Object>
     The ordered set of egress rules. Each rule contains a set of packet match
     criteria and a corresponding action to apply.

   ingress	<[]Object>
     The ordered set of ingress rules. Each rule contains a set of packet match
     criteria and a corresponding action to apply.

   namespaceSelector	<string>
     NamespaceSelector is an optional field for an expression used to select a
     pod based on namespaces.

   order	<number>
     Order is an optional field that specifies the order in which the policy is
     applied. Policies with higher "order" are applied after those with lower
     order. If the order is omitted, it may be considered to be "infinite" -
     i.e. the policy will be applied last. Policies with identical order will be
     applied in alphanumerical order based on the Policy "Name".

   preDNAT	<boolean>
     PreDNAT indicates to apply the rules in this policy before any DNAT.

   selector	<string>
     The selector is an expression used to pick pick out the endpoints that the
     policy should be applied to. Selector expressions follow this syntax:
     label == "string_literal" -> comparison, e.g. my_label == "foo bar" label
     != "string_literal" -> not equal; also matches if label is not present
     label in { "a", "b", "c", ... } -> true if the value of label X is one of
     "a", "b", "c" label not in { "a", "b", "c", ... } -> true if the value of
     label X is not one of "a", "b", "c" has(label_name) -> True if that label
     is present ! expr -> negation of expr expr && expr -> Short-circuit and
     expr || expr -> Short-circuit or ( expr ) -> parens for grouping all() or
     the empty selector -> matches all endpoints. Label names are allowed to
     contain alphanumerics, -, _ and /. String literals are more permissive but
     they do not support escape characters. Examples (with made-up labels):
     type == "webserver" && deployment == "prod" type in {"frontend", "backend"}
     deployment != "dev" ! has(label_name)

   serviceAccountSelector	<string>
     ServiceAccountSelector is an optional field for an expression used to
     select a pod based on service accounts.

   types	<[]string>
     Types indicates whether this policy applies to ingress, or to egress, or to
     both. When not explicitly specified (and so the value on creation is empty
     or nil), Calico defaults Types according to what Ingress and Egress rules
     are present in the policy. The default is:
     - [ PolicyTypeIngress ], if there are no Egress rules (including the case
     where there are also no Ingress rules)
     - [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules
     - [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and
     Egress rules. When the policy is read back again, Types will always be one
     of these values, never empty or nil.

KIND:     GlobalNetworkSet
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     GlobalNetworkSetSpec contains the specification for a NetworkSet resource.

FIELDS:
   nets	<[]string>
     The list of IP networks that belong to this set.

KIND:     HostEndpoint
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     HostEndpointSpec contains the specification for a HostEndpoint resource.

FIELDS:
   expectedIPs	<[]string>
     The expected IP addresses (IPv4 and IPv6) of the endpoint. If
     "InterfaceName" is not present, Calico will look for an interface matching
     any of the IPs in the list and apply policy to that. Note: When using the
     selector match criteria in an ingress or egress security Policy or Profile,
     Calico converts the selector into a set of IP addresses. For host
     endpoints, the ExpectedIPs field is used for that purpose. (If only the
     interface name is specified, Calico does not learn the IPs of the interface
     for use in match criteria.)

   interfaceName	<string>
     Either "*", or the name of a specific Linux interface to apply policy to;
     or empty. "*" indicates that this HostEndpoint governs all traffic to, from
     or through the default network namespace of the host named by the "Node"
     field; entering and leaving that namespace via any interface, including
     those from/to non-host-networked local workloads. If InterfaceName is not
     "*", this HostEndpoint only governs traffic that enters or leaves the host
     through the specific interface named by InterfaceName, or - when
     InterfaceName is empty - through the specific interface that has one of the
     IPs in ExpectedIPs. Therefore, when InterfaceName is empty, at least one
     expected IP must be specified. Only external interfaces (such as
     “eth0”) are supported here; it isn't possible for a HostEndpoint to
     protect traffic through a specific local workload interface. Note: Only
     some kinds of policy are implemented for "*" HostEndpoints; initially just
     pre-DNAT policy. Please check Calico documentation for the latest position.

   node	<string>
     The node name identifying the Calico node instance.

   ports	<[]Object>
     Ports contains the endpoint's named ports, which may be referenced in
     security policy rules.

   profiles	<[]string>
     A list of identifiers of security Profile objects that apply to this
     endpoint. Each profile is applied in the order that they appear in this
     list. Profile rules are applied after the selector-based security policy.

KIND:     IPAMBlock
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     IPAMBlockSpec contains the specification for an IPAMBlock resource.

FIELDS:
   affinity	<string>

   allocations	<[]> -required-

   attributes	<[]Object> -required-

   cidr	<string> -required-

   deleted	<boolean>

   strictAffinity	<boolean> -required-

   unallocated	<[]integer> -required-

KIND:     IPAMConfig
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     IPAMConfigSpec contains the specification for an IPAMConfig resource.

FIELDS:
   autoAllocateBlocks	<boolean> -required-

   maxBlocksPerHost	<integer>
     MaxBlocksPerHost, if non-zero, is the max number of blocks that can be
     affine to each host.

   strictAffinity	<boolean> -required-

KIND:     IPAMHandle
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     IPAMHandleSpec contains the specification for an IPAMHandle resource.

FIELDS:
   block	<map[string]integer> -required-

   deleted	<boolean>

   handleID	<string> -required-

KIND:     IPPool
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     IPPoolSpec contains the specification for an IPPool resource.

FIELDS:
   blockSize	<integer>
     The block size to use for IP address assignments from this pool. Defaults
     to 26 for IPv4 and 112 for IPv6.

   cidr	<string> -required-
     The pool CIDR.

   disabled	<boolean>
     When disabled is true, Calico IPAM will not assign addresses from this
     pool.

   ipip	<Object>
     Deprecated: this field is only used for APIv1 backwards compatibility.
     Setting this field is not allowed, this field is for internal use only.

   ipipMode	<string>
     Contains configuration for IPIP tunneling for this pool. If not specified,
     then this is defaulted to "Never" (i.e. IPIP tunneling is disabled).

   nat-outgoing	<boolean>
     Deprecated: this field is only used for APIv1 backwards compatibility.
     Setting this field is not allowed, this field is for internal use only.

   natOutgoing	<boolean>
     When nat-outgoing is true, packets sent from Calico networked containers in
     this pool to destinations outside of this pool will be masqueraded.

   nodeSelector	<string>
     Allows IPPool to allocate for a specific node by label selector.

   vxlanMode	<string>
     Contains configuration for VXLAN tunneling for this pool. If not specified,
     then this is defaulted to "Never" (i.e. VXLAN tunneling is disabled).

KIND:     KubeControllersConfiguration
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     KubeControllersConfigurationSpec contains the values of the Kubernetes
     controllers configuration.

FIELDS:
   controllers	<Object> -required-
     Controllers enables and configures individual Kubernetes controllers

   etcdV3CompactionPeriod	<string>
     EtcdV3CompactionPeriod is the period between etcdv3 compaction requests.
     Set to 0 to disable. [Default: 10m]

   healthChecks	<string>
     HealthChecks enables or disables support for health checks [Default:
     Enabled]

   logSeverityScreen	<string>
     LogSeverityScreen is the log severity above which logs are sent to the
     stdout. [Default: Info]

KIND:     NetworkPolicy
VERSION:  networking.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior for this NetworkPolicy.

     NetworkPolicySpec provides the specification of a NetworkPolicy

FIELDS:
   egress	<[]Object>
     List of egress rules to be applied to the selected pods. Outgoing traffic
     is allowed if there are no NetworkPolicies selecting the pod (and cluster
     policy otherwise allows the traffic), OR if the traffic matches at least
     one egress rule across all of the NetworkPolicy objects whose podSelector
     matches the pod. If this field is empty then this NetworkPolicy limits all
     outgoing traffic (and serves solely to ensure that the pods it selects are
     isolated by default). This field is beta-level in 1.8

   ingress	<[]Object>
     List of ingress rules to be applied to the selected pods. Traffic is
     allowed to a pod if there are no NetworkPolicies selecting the pod (and
     cluster policy otherwise allows the traffic), OR if the traffic source is
     the pod's local node, OR if the traffic matches at least one ingress rule
     across all of the NetworkPolicy objects whose podSelector matches the pod.
     If this field is empty then this NetworkPolicy does not allow any traffic
     (and serves solely to ensure that the pods it selects are isolated by
     default)

   podSelector	<Object> -required-
     Selects the pods to which this NetworkPolicy object applies. The array of
     ingress rules is applied to any pods selected by this field. Multiple
     network policies can select the same set of pods. In this case, the ingress
     rules for each are combined additively. This field is NOT optional and
     follows standard label selector semantics. An empty podSelector matches all
     pods in this namespace.

   policyTypes	<[]string>
     List of rule types that the NetworkPolicy relates to. Valid options are
     "Ingress", "Egress", or "Ingress,Egress". If this field is not specified,
     it will default based on the existence of Ingress or Egress rules; policies
     that contain an Egress section are assumed to affect Egress, and all
     policies (whether or not they contain an Ingress section) are assumed to
     affect Ingress. If you want to write an egress-only policy, you must
     explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write
     a policy that specifies that no egress is allowed, you must specify a
     policyTypes value that include "Egress" (since such a policy would not
     include an Egress section and would otherwise default to just [ "Ingress"
     ]). This field is beta-level in 1.8

KIND:     NetworkSet
VERSION:  crd.projectcalico.org/v1

RESOURCE: spec <Object>

DESCRIPTION:
     NetworkSetSpec contains the specification for a NetworkSet resource.

FIELDS:
   nets	<[]string>
     The list of IP networks that belong to this set.

KIND:     Ingress
VERSION:  networking.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec is the desired state of the Ingress. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     IngressSpec describes the Ingress the user wishes to exist.

FIELDS:
   defaultBackend	<Object>
     DefaultBackend is the backend that should handle requests that don't match
     any rule. If Rules are not specified, DefaultBackend must be specified. If
     DefaultBackend is not set, the handling of requests that do not match any
     of the rules will be up to the Ingress controller.

   ingressClassName	<string>
     IngressClassName is the name of the IngressClass cluster resource. The
     associated IngressClass defines which controller will implement the
     resource. This replaces the deprecated `kubernetes.io/ingress.class`
     annotation. For backwards compatibility, when that annotation is set, it
     must be given precedence over this field. The controller may emit a warning
     if the field and annotation have different values. Implementations of this
     API should ignore Ingresses without a class specified. An IngressClass
     resource may be marked as default, which can be used to set a default value
     for this field. For more information, refer to the IngressClass
     documentation.

   rules	<[]Object>
     A list of host rules used to configure the Ingress. If unspecified, or no
     rule matches, all traffic is sent to the default backend.

   tls	<[]Object>
     TLS configuration. Currently the Ingress only supports a single TLS port,
     443. If multiple members of this list specify different hosts, they will be
     multiplexed on the same port according to the hostname specified through
     the SNI TLS extension, if the ingress controller fulfilling the ingress
     supports SNI.

KIND:     FlowSchema
VERSION:  flowcontrol.apiserver.k8s.io/v1beta1

RESOURCE: spec <Object>

DESCRIPTION:
     `spec` is the specification of the desired behavior of a FlowSchema. More
     info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     FlowSchemaSpec describes how the FlowSchema's specification looks like.

FIELDS:
   distinguisherMethod	<Object>
     `distinguisherMethod` defines how to compute the flow distinguisher for
     requests that match this schema. `nil` specifies that the distinguisher is
     disabled and thus will always be the empty string.

   matchingPrecedence	<integer>
     `matchingPrecedence` is used to choose among the FlowSchemas that match a
     given request. The chosen FlowSchema is among those with the numerically
     lowest (which we take to be logically highest) MatchingPrecedence. Each
     MatchingPrecedence value must be ranged in [1,10000]. Note that if the
     precedence is not specified, it will be set to 1000 as default.

   priorityLevelConfiguration	<Object> -required-
     `priorityLevelConfiguration` should reference a PriorityLevelConfiguration
     in the cluster. If the reference cannot be resolved, the FlowSchema will be
     ignored and marked as invalid in its status. Required.

   rules	<[]Object>
     `rules` describes which requests will match this flow schema. This
     FlowSchema matches a request if and only if at least one member of rules
     matches the request. if it is an empty slice, there will be no requests
     matching the FlowSchema.

KIND:     PriorityLevelConfiguration
VERSION:  flowcontrol.apiserver.k8s.io/v1beta1

RESOURCE: spec <Object>

DESCRIPTION:
     `spec` is the specification of the desired behavior of a
     "request-priority". More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     PriorityLevelConfigurationSpec specifies the configuration of a priority
     level.

FIELDS:
   limited	<Object>
     `limited` specifies how requests are handled for a Limited priority level.
     This field must be non-empty if and only if `type` is `"Limited"`.

   type	<string> -required-
     `type` indicates whether this priority level is subject to limitation on
     request execution. A value of `"Exempt"` means that requests of this
     priority level are not subject to a limit (and thus are never queued) and
     do not detract from the capacity made available to other priority levels. A
     value of `"Limited"` means that (a) requests of this priority level _are_
     subject to limits and (b) some of the server's limited capacity is made
     available exclusively to this priority level. Required.

KIND:     Node
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec defines the behavior of a node.
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     NodeSpec describes the attributes that a node is created with.

FIELDS:
   configSource	<Object>
     If specified, the source to get node configuration from The
     DynamicKubeletConfig feature gate must be enabled for the Kubelet to use
     this field

   externalID	<string>
     Deprecated. Not all kubelets will set this field. Remove field after 1.13.
     see: https://issues.k8s.io/61966

   podCIDR	<string>
     PodCIDR represents the pod IP range assigned to the node.

   podCIDRs	<[]string>
     podCIDRs represents the IP ranges assigned to the node for usage by Pods on
     that node. If this field is specified, the 0th entry must match the podCIDR
     field. It may contain at most 1 value for each of IPv4 and IPv6.

   providerID	<string>
     ID of the node assigned by the cloud provider in the format:
     <ProviderName>://<ProviderSpecificNodeID>

   taints	<[]Object>
     If specified, the node's taints.

   unschedulable	<boolean>
     Unschedulable controls node schedulability of new pods. By default, node is
     schedulable. More info:
     https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration

KIND:     Pod
VERSION:  v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of the pod. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     PodSpec is a description of a pod.

FIELDS:
   activeDeadlineSeconds	<integer>
     Optional duration in seconds the pod may be active on the node relative to
     StartTime before the system will actively try to mark it failed and kill
     associated containers. Value must be a positive integer.

   affinity	<Object>
     If specified, the pod's scheduling constraints

   automountServiceAccountToken	<boolean>
     AutomountServiceAccountToken indicates whether a service account token
     should be automatically mounted.

   containers	<[]Object> -required-
     List of containers belonging to the pod. Containers cannot currently be
     added or removed. There must be at least one container in a Pod. Cannot be
     updated.

   dnsConfig	<Object>
     Specifies the DNS parameters of a pod. Parameters specified here will be
     merged to the generated DNS configuration based on DNSPolicy.

   dnsPolicy	<string>
     Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are
     'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS
     parameters given in DNSConfig will be merged with the policy selected with
     DNSPolicy. To have DNS options set along with hostNetwork, you have to
     specify DNS policy explicitly to 'ClusterFirstWithHostNet'.

   enableServiceLinks	<boolean>
     EnableServiceLinks indicates whether information about services should be
     injected into pod's environment variables, matching the syntax of Docker
     links. Optional: Defaults to true.

   ephemeralContainers	<[]Object>
     List of ephemeral containers run in this pod. Ephemeral containers may be
     run in an existing pod to perform user-initiated actions such as debugging.
     This list cannot be specified when creating a pod, and it cannot be
     modified by updating the pod spec. In order to add an ephemeral container
     to an existing pod, use the pod's ephemeralcontainers subresource. This
     field is alpha-level and is only honored by servers that enable the
     EphemeralContainers feature.

   hostAliases	<[]Object>
     HostAliases is an optional list of hosts and IPs that will be injected into
     the pod's hosts file if specified. This is only valid for non-hostNetwork
     pods.

   hostIPC	<boolean>
     Use the host's ipc namespace. Optional: Default to false.

   hostNetwork	<boolean>
     Host networking requested for this pod. Use the host's network namespace.
     If this option is set, the ports that will be used must be specified.
     Default to false.

   hostPID	<boolean>
     Use the host's pid namespace. Optional: Default to false.

   hostname	<string>
     Specifies the hostname of the Pod If not specified, the pod's hostname will
     be set to a system-defined value.

   imagePullSecrets	<[]Object>
     ImagePullSecrets is an optional list of references to secrets in the same
     namespace to use for pulling any of the images used by this PodSpec. If
     specified, these secrets will be passed to individual puller
     implementations for them to use. For example, in the case of docker, only
     DockerConfig type secrets are honored. More info:
     https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod

   initContainers	<[]Object>
     List of initialization containers belonging to the pod. Init containers are
     executed in order prior to containers being started. If any init container
     fails, the pod is considered to have failed and is handled according to its
     restartPolicy. The name for an init container or normal container must be
     unique among all containers. Init containers may not have Lifecycle
     actions, Readiness probes, Liveness probes, or Startup probes. The
     resourceRequirements of an init container are taken into account during
     scheduling by finding the highest request/limit for each resource type, and
     then using the max of of that value or the sum of the normal containers.
     Limits are applied to init containers in a similar fashion. Init containers
     cannot currently be added or removed. Cannot be updated. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/init-containers/

   nodeName	<string>
     NodeName is a request to schedule this pod onto a specific node. If it is
     non-empty, the scheduler simply schedules this pod onto that node, assuming
     that it fits resource requirements.

   nodeSelector	<map[string]string>
     NodeSelector is a selector which must be true for the pod to fit on a node.
     Selector which must match a node's labels for the pod to be scheduled on
     that node. More info:
     https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

   overhead	<map[string]string>
     Overhead represents the resource overhead associated with running a pod for
     a given RuntimeClass. This field will be autopopulated at admission time by
     the RuntimeClass admission controller. If the RuntimeClass admission
     controller is enabled, overhead must not be set in Pod create requests. The
     RuntimeClass admission controller will reject Pod create requests which
     have the overhead already set. If RuntimeClass is configured and selected
     in the PodSpec, Overhead will be set to the value defined in the
     corresponding RuntimeClass, otherwise it will remain unset and treated as
     zero. More info:
     https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This
     field is alpha-level as of Kubernetes v1.16, and is only honored by servers
     that enable the PodOverhead feature.

   preemptionPolicy	<string>
     PreemptionPolicy is the Policy for preempting pods with lower priority. One
     of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
     This field is beta-level, gated by the NonPreemptingPriority feature-gate.

   priority	<integer>
     The priority value. Various system components use this field to find the
     priority of the pod. When Priority Admission Controller is enabled, it
     prevents users from setting this field. The admission controller populates
     this field from PriorityClassName. The higher the value, the higher the
     priority.

   priorityClassName	<string>
     If specified, indicates the pod's priority. "system-node-critical" and
     "system-cluster-critical" are two special keywords which indicate the
     highest priorities with the former being the highest priority. Any other
     name must be defined by creating a PriorityClass object with that name. If
     not specified, the pod priority will be default or zero if there is no
     default.

   readinessGates	<[]Object>
     If specified, all readiness gates will be evaluated for pod readiness. A
     pod is ready when all its containers are ready AND all conditions specified
     in the readiness gates have status equal to "True" More info:
     https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md

   restartPolicy	<string>
     Restart policy for all containers within the pod. One of Always, OnFailure,
     Never. Default to Always. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy

   runtimeClassName	<string>
     RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group,
     which should be used to run this pod. If no RuntimeClass resource matches
     the named class, the pod will not be run. If unset or empty, the "legacy"
     RuntimeClass will be used, which is an implicit class with an empty
     definition that uses the default runtime handler. More info:
     https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a
     beta feature as of Kubernetes v1.14.

   schedulerName	<string>
     If specified, the pod will be dispatched by specified scheduler. If not
     specified, the pod will be dispatched by default scheduler.

   securityContext	<Object>
     SecurityContext holds pod-level security attributes and common container
     settings. Optional: Defaults to empty. See type description for default
     values of each field.

   serviceAccount	<string>
     DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
     Deprecated: Use serviceAccountName instead.

   serviceAccountName	<string>
     ServiceAccountName is the name of the ServiceAccount to use to run this
     pod. More info:
     https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

   setHostnameAsFQDN	<boolean>
     If true the pod's hostname will be configured as the pod's FQDN, rather
     than the leaf name (the default). In Linux containers, this means setting
     the FQDN in the hostname field of the kernel (the nodename field of struct
     utsname). In Windows containers, this means setting the registry value of
     hostname for the registry key
     HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to
     FQDN. If a pod does not have FQDN, this has no effect. Default to false.

   shareProcessNamespace	<boolean>
     Share a single process namespace between all of the containers in a pod.
     When this is set containers will be able to view and signal processes from
     other containers in the same pod, and the first process in each container
     will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both
     be set. Optional: Default to false.

   subdomain	<string>
     If specified, the fully qualified Pod hostname will be
     "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not
     specified, the pod will not have a domainname at all.

   terminationGracePeriodSeconds	<integer>
     Optional duration in seconds the pod needs to terminate gracefully. May be
     decreased in delete request. Value must be non-negative integer. The value
     zero indicates delete immediately. If this value is nil, the default grace
     period will be used instead. The grace period is the duration in seconds
     after the processes running in the pod are sent a termination signal and
     the time when the processes are forcibly halted with a kill signal. Set
     this value longer than the expected cleanup time for your process. Defaults
     to 30 seconds.

   tolerations	<[]Object>
     If specified, the pod's tolerations.

   topologySpreadConstraints	<[]Object>
     TopologySpreadConstraints describes how a group of pods ought to spread
     across topology domains. Scheduler will schedule pods in a way which abides
     by the constraints. All topologySpreadConstraints are ANDed.

   volumes	<[]Object>
     List of volumes that can be mounted by containers belonging to the pod.
     More info: https://kubernetes.io/docs/concepts/storage/volumes

KIND:     Tenant
VERSION:  minio.min.io/v2

RESOURCE: spec <Object>

DESCRIPTION:
     <empty>

FIELDS:
   additionalVolumeMounts	<[]Object>

   additionalVolumes	<[]Object>

   buckets	<[]Object>

   certConfig	<Object>

   configuration	<Object>

   credsSecret	<Object>

   env	<[]Object>

   exposeServices	<Object>

   externalCaCertSecret	<[]Object>

   externalCertSecret	<[]Object>

   externalClientCertSecret	<Object>

   externalClientCertSecrets	<[]Object>

   features	<Object>

   image	<string>

   imagePullPolicy	<string>

   imagePullSecret	<Object>

   initContainers	<[]Object>

   kes	<Object>

   liveness	<Object>

   logging	<Object>

   mountPath	<string>

   podManagementPolicy	<string>

   pools	<[]Object> -required-

   priorityClassName	<string>

   prometheusOperator	<boolean>

   readiness	<Object>

   requestAutoCert	<boolean>

   serviceAccountName	<string>

   serviceMetadata	<Object>

   sideCars	<Object>

   startup	<Object>

   subPath	<string>

   users	<[]Object>

KIND:     AlertmanagerConfig
VERSION:  monitoring.coreos.com/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     AlertmanagerConfigSpec is a specification of the desired behavior of the
     Alertmanager configuration. By definition, the Alertmanager configuration
     only applies to alerts for which the `namespace` label is equal to the
     namespace of the AlertmanagerConfig resource.

FIELDS:
   inhibitRules	<[]Object>
     List of inhibition rules. The rules will only apply to alerts matching the
     resource's namespace.

   muteTimeIntervals	<[]Object>
     List of MuteTimeInterval specifying when the routes should be muted.

   receivers	<[]Object>
     List of receivers.

   route	<Object>
     The Alertmanager route definition for alerts matching the resource's
     namespace. If present, it will be added to the generated Alertmanager
     configuration as a first-level route.

KIND:     Alertmanager
VERSION:  monitoring.coreos.com/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of the Alertmanager cluster. More
     info:
     https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

FIELDS:
   additionalPeers	<[]string>
     AdditionalPeers allows injecting a set of additional Alertmanagers to peer
     with to form a highly available cluster.

   affinity	<Object>
     If specified, the pod's scheduling constraints.

   alertmanagerConfigMatcherStrategy	<Object>
     The AlertmanagerConfigMatcherStrategy defines how AlertmanagerConfig
     objects match the alerts. In the future more options may be added.

   alertmanagerConfigNamespaceSelector	<Object>
     Namespaces to be selected for AlertmanagerConfig discovery. If nil, only
     check own namespace.

   alertmanagerConfigSelector	<Object>
     AlertmanagerConfigs to be selected for to merge and configure Alertmanager
     with.

   alertmanagerConfiguration	<Object>
     EXPERIMENTAL: alertmanagerConfiguration specifies the configuration of
     Alertmanager. If defined, it takes precedence over the `configSecret`
     field. This field may change in future releases.

   automountServiceAccountToken	<boolean>
     AutomountServiceAccountToken indicates whether a service account token
     should be automatically mounted in the pod. If the service account has
     `automountServiceAccountToken: true`, set the field to `false` to opt out
     of automounting API credentials.

   baseImage	<string>
     Base image that is used to deploy pods, without tag. Deprecated: use
     'image' instead

   clusterAdvertiseAddress	<string>
     ClusterAdvertiseAddress is the explicit address to advertise in cluster.
     Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918:
     https://tools.ietf.org/html/rfc1918

   clusterGossipInterval	<string>
     Interval between gossip attempts.

   clusterPeerTimeout	<string>
     Timeout for cluster peering.

   clusterPushpullInterval	<string>
     Interval between pushpull attempts.

   configMaps	<[]string>
     ConfigMaps is a list of ConfigMaps in the same namespace as the
     Alertmanager object, which shall be mounted into the Alertmanager Pods.
     Each ConfigMap is added to the StatefulSet definition as a volume named
     `configmap-<configmap-name>`. The ConfigMaps are mounted into
     `/etc/alertmanager/configmaps/<configmap-name>` in the 'alertmanager'
     container.

   configSecret	<string>
     ConfigSecret is the name of a Kubernetes Secret in the same namespace as
     the Alertmanager object, which contains the configuration for this
     Alertmanager instance. If empty, it defaults to
     `alertmanager-<alertmanager-name>`. The Alertmanager configuration should
     be available under the `alertmanager.yaml` key. Additional keys from the
     original secret are copied to the generated secret and mounted into the
     `/etc/alertmanager/config` directory in the `alertmanager` container. If
     either the secret or the `alertmanager.yaml` key is missing, the operator
     provisions a minimal Alertmanager configuration with one empty receiver
     (effectively dropping alert notifications).

   containers	<[]Object>
     Containers allows injecting additional containers. This is meant to allow
     adding an authentication proxy to an Alertmanager pod. Containers described
     here modify an operator generated container if they share the same name and
     modifications are done via a strategic merge patch. The current container
     names are: `alertmanager` and `config-reloader`. Overriding containers is
     entirely outside the scope of what the maintainers will support and by
     doing so, you accept that this behaviour may break at any time without
     notice.

   externalUrl	<string>
     The external URL the Alertmanager instances will be available under. This
     is necessary to generate correct URLs. This is necessary if Alertmanager is
     not served from root of a DNS name.

   forceEnableClusterMode	<boolean>
     ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster
     mode when running with a single replica. Use case is e.g. spanning an
     Alertmanager cluster across Kubernetes clusters with a single replica in
     each.

   hostAliases	<[]Object>
     Pods' hostAliases configuration

   image	<string>
     Image if specified has precedence over baseImage, tag and sha combinations.
     Specifying the version is still necessary to ensure the Prometheus Operator
     knows what version of Alertmanager is being configured.

   imagePullPolicy	<string>
     Image pull policy for the 'alertmanager', 'init-config-reloader' and
     'config-reloader' containers. See
     https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
     for more details.

   imagePullSecrets	<[]Object>
     An optional list of references to secrets in the same namespace to use for
     pulling prometheus and alertmanager images from registries see
     http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod

   initContainers	<[]Object>
     InitContainers allows adding initContainers to the pod definition. Those
     can be used to e.g. fetch secrets for injection into the Alertmanager
     configuration from external sources. Any errors during the execution of an
     initContainer will lead to a restart of the Pod. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     InitContainers described here modify an operator generated init containers
     if they share the same name and modifications are done via a strategic
     merge patch. The current init container name is: `init-config-reloader`.
     Overriding init containers is entirely outside the scope of what the
     maintainers will support and by doing so, you accept that this behaviour
     may break at any time without notice.

   listenLocal	<boolean>
     ListenLocal makes the Alertmanager server listen on loopback, so that it
     does not bind against the Pod IP. Note this is only for the Alertmanager
     UI, not the gossip communication.

   logFormat	<string>
     Log format for Alertmanager to be configured with.

   logLevel	<string>
     Log level for Alertmanager to be configured with.

   minReadySeconds	<integer>
     Minimum number of seconds for which a newly created pod should be ready
     without any of its container crashing for it to be considered available.
     Defaults to 0 (pod will be considered available as soon as it is ready)
     This is an alpha field from kubernetes 1.22 until 1.24 which requires
     enabling the StatefulSetMinReadySeconds feature gate.

   nodeSelector	<map[string]string>
     Define which Nodes the Pods are scheduled on.

   paused	<boolean>
     If set to true all actions on the underlying managed objects are not goint
     to be performed, except for delete actions.

   podMetadata	<Object>
     PodMetadata configures Labels and Annotations which are propagated to the
     alertmanager pods.

   portName	<string>
     Port name used for the pods and governing service. Defaults to `web`.

   priorityClassName	<string>
     Priority class assigned to the Pods

   replicas	<integer>
     Size is the expected size of the alertmanager cluster. The controller will
     eventually make the size of the running cluster equal to the expected size.

   resources	<Object>
     Define resources requests and limits for single Pods.

   retention	<string>
     Time duration Alertmanager shall retain data for. Default is '120h', and
     must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds
     minutes hours).

   routePrefix	<string>
     The route prefix Alertmanager registers HTTP handlers for. This is useful,
     if using ExternalURL and a proxy is rewriting HTTP routes of a request, and
     the actual ExternalURL is still true, but the server serves requests under
     a different route prefix. For example for use with `kubectl proxy`.

   secrets	<[]string>
     Secrets is a list of Secrets in the same namespace as the Alertmanager
     object, which shall be mounted into the Alertmanager Pods. Each Secret is
     added to the StatefulSet definition as a volume named
     `secret-<secret-name>`. The Secrets are mounted into
     `/etc/alertmanager/secrets/<secret-name>` in the 'alertmanager' container.

   securityContext	<Object>
     SecurityContext holds pod-level security attributes and common container
     settings. This defaults to the default PodSecurityContext.

   serviceAccountName	<string>
     ServiceAccountName is the name of the ServiceAccount to use to run the
     Prometheus Pods.

   sha	<string>
     SHA of Alertmanager container image to be deployed. Defaults to the value
     of `version`. Similar to a tag, but the SHA explicitly deploys an immutable
     container image. Version and Tag are ignored if SHA is set. Deprecated: use
     'image' instead. The image digest can be specified as part of the image
     URL.

   storage	<Object>
     Storage is the definition of how storage will be used by the Alertmanager
     instances.

   tag	<string>
     Tag of Alertmanager container image to be deployed. Defaults to the value
     of `version`. Version is ignored if Tag is set. Deprecated: use 'image'
     instead. The image tag can be specified as part of the image URL.

   tolerations	<[]Object>
     If specified, the pod's tolerations.

   topologySpreadConstraints	<[]Object>
     If specified, the pod's topology spread constraints.

   version	<string>
     Version the cluster should be on.

   volumeMounts	<[]Object>
     VolumeMounts allows configuration of additional VolumeMounts on the output
     StatefulSet definition. VolumeMounts specified will be appended to other
     VolumeMounts in the alertmanager container, that are generated as a result
     of StorageSpec objects.

   volumes	<[]Object>
     Volumes allows configuration of additional volumes on the output
     StatefulSet definition. Volumes specified will be appended to other volumes
     that are generated as a result of StorageSpec objects.

   web	<Object>
     Defines the web command line flags when starting Alertmanager.

KIND:     PodMonitor
VERSION:  monitoring.coreos.com/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of desired Pod selection for target discovery by Prometheus.

FIELDS:
   attachMetadata	<Object>
     Attaches node metadata to discovered targets. Requires Prometheus v2.35.0
     and above.

   jobLabel	<string>
     The label to use to retrieve the job name from.

   keepDroppedTargets	<integer>
     Per-scrape limit on the number of targets dropped by relabeling that will
     be kept in memory. 0 means no limit. It requires Prometheus >= v2.47.0.

   labelLimit	<integer>
     Per-scrape limit on number of labels that will be accepted for a sample.
     Only valid in Prometheus versions 2.27.0 and newer.

   labelNameLengthLimit	<integer>
     Per-scrape limit on length of labels name that will be accepted for a
     sample. Only valid in Prometheus versions 2.27.0 and newer.

   labelValueLengthLimit	<integer>
     Per-scrape limit on length of labels value that will be accepted for a
     sample. Only valid in Prometheus versions 2.27.0 and newer.

   namespaceSelector	<Object>
     Selector to select which namespaces the Endpoints objects are discovered
     from.

   podMetricsEndpoints	<[]Object> -required-
     A list of endpoints allowed as part of this PodMonitor.

   podTargetLabels	<[]string>
     PodTargetLabels transfers labels on the Kubernetes Pod onto the target.

   sampleLimit	<integer>
     SampleLimit defines per-scrape limit on number of scraped samples that will
     be accepted.

   selector	<Object> -required-
     Selector to select Pod objects.

   targetLimit	<integer>
     TargetLimit defines a limit on the number of scraped targets that will be
     accepted.

KIND:     Probe
VERSION:  monitoring.coreos.com/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of desired Ingress selection for target discovery by
     Prometheus.

FIELDS:
   authorization	<Object>
     Authorization section for this endpoint

   basicAuth	<Object>
     BasicAuth allow an endpoint to authenticate over basic authentication. More
     info: https://prometheus.io/docs/operating/configuration/#endpoint

   bearerTokenSecret	<Object>
     Secret to mount to read bearer token for scraping targets. The secret needs
     to be in the same namespace as the probe and accessible by the Prometheus
     Operator.

   interval	<string>
     Interval at which targets are probed using the configured prober. If not
     specified Prometheus' global scrape interval is used.

   jobName	<string>
     The job name assigned to scraped metrics by default.

   keepDroppedTargets	<integer>
     Per-scrape limit on the number of targets dropped by relabeling that will
     be kept in memory. 0 means no limit. It requires Prometheus >= v2.47.0.

   labelLimit	<integer>
     Per-scrape limit on number of labels that will be accepted for a sample.
     Only valid in Prometheus versions 2.27.0 and newer.

   labelNameLengthLimit	<integer>
     Per-scrape limit on length of labels name that will be accepted for a
     sample. Only valid in Prometheus versions 2.27.0 and newer.

   labelValueLengthLimit	<integer>
     Per-scrape limit on length of labels value that will be accepted for a
     sample. Only valid in Prometheus versions 2.27.0 and newer.

   metricRelabelings	<[]Object>
     MetricRelabelConfigs to apply to samples before ingestion.

   module	<string>
     The module to use for probing specifying how to probe the target. Example
     module configuring in the blackbox exporter:
     https://github.com/prometheus/blackbox_exporter/blob/master/example.yml

   oauth2	<Object>
     OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.

   prober	<Object>
     Specification for the prober to use for probing targets. The prober.URL
     parameter is required. Targets cannot be probed if left empty.

   sampleLimit	<integer>
     SampleLimit defines per-scrape limit on number of scraped samples that will
     be accepted.

   scrapeTimeout	<string>
     Timeout for scraping metrics from the Prometheus exporter. If not
     specified, the Prometheus global scrape timeout is used.

   targetLimit	<integer>
     TargetLimit defines a limit on the number of scraped targets that will be
     accepted.

   targets	<Object>
     Targets defines a set of static or dynamically discovered targets to probe.

   tlsConfig	<Object>
     TLS configuration to use when scraping the endpoint.

KIND:     PrometheusAgent
VERSION:  monitoring.coreos.com/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of the Prometheus agent. More info:
     https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

FIELDS:
   additionalArgs	<[]Object>
     AdditionalArgs allows setting additional arguments for the 'prometheus'
     container. It is intended for e.g. activating hidden flags which are not
     supported by the dedicated configuration options yet. The arguments are
     passed as-is to the Prometheus container which may cause issues if they are
     invalid or not supported by the given Prometheus version. In case of an
     argument conflict (e.g. an argument which is already set by the operator
     itself) or when providing an invalid argument, the reconciliation will fail
     and an error will be logged.

   additionalScrapeConfigs	<Object>
     AdditionalScrapeConfigs allows specifying a key of a Secret containing
     additional Prometheus scrape configurations. Scrape configurations
     specified are appended to the configurations generated by the Prometheus
     Operator. Job configurations specified must have the form as specified in
     the official Prometheus documentation:
     https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config.
     As scrape configs are appended, the user is responsible to make sure it is
     valid. Note that using this feature may expose the possibility to break
     upgrades of Prometheus. It is advised to review Prometheus release notes to
     ensure that no incompatible scrape configs are going to break Prometheus
     after the upgrade.

   affinity	<Object>
     Defines the Pods' affinity scheduling rules if specified.

   apiserverConfig	<Object>
     APIServerConfig allows specifying a host and auth methods to access the
     Kuberntees API server. If null, Prometheus is assumed to run inside of the
     cluster: it will discover the API servers automatically and use the Pod's
     CA certificate and bearer token file at
     /var/run/secrets/kubernetes.io/serviceaccount/.

   arbitraryFSAccessThroughSMs	<Object>
     When true, ServiceMonitor, PodMonitor and Probe object are forbidden to
     reference arbitrary files on the file system of the 'prometheus' container.
     When a ServiceMonitor's endpoint specifies a `bearerTokenFile` value (e.g.
     '/var/run/secrets/kubernetes.io/serviceaccount/token'), a malicious target
     can get access to the Prometheus service account's token in the Prometheus'
     scrape request. Setting `spec.arbitraryFSAccessThroughSM` to 'true' would
     prevent the attack. Users should instead provide the credentials using the
     `spec.bearerTokenSecret` field.

   bodySizeLimit	<string>
     BodySizeLimit defines per-scrape on response body size. Only valid in
     Prometheus versions 2.45.0 and newer.

   configMaps	<[]string>
     ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus
     object, which shall be mounted into the Prometheus Pods. Each ConfigMap is
     added to the StatefulSet definition as a volume named
     `configmap-<configmap-name>`. The ConfigMaps are mounted into
     /etc/prometheus/configmaps/<configmap-name> in the 'prometheus' container.

   containers	<[]Object>
     Containers allows injecting additional containers or modifying operator
     generated containers. This can be used to allow adding an authentication
     proxy to the Pods or to change the behavior of an operator generated
     container. Containers described here modify an operator generated container
     if they share the same name and modifications are done via a strategic
     merge patch. The names of containers managed by the operator are: *
     `prometheus` * `config-reloader` * `thanos-sidecar` Overriding containers
     is entirely outside the scope of what the maintainers will support and by
     doing so, you accept that this behaviour may break at any time without
     notice.

   enableFeatures	<[]string>
     Enable access to Prometheus feature flags. By default, no features are
     enabled. Enabling features which are disabled by default is entirely
     outside the scope of what the maintainers will support and by doing so, you
     accept that this behaviour may break at any time without notice. For more
     information see https://prometheus.io/docs/prometheus/latest/feature_flags/

   enableRemoteWriteReceiver	<boolean>
     Enable Prometheus to be used as a receiver for the Prometheus remote write
     protocol. WARNING: This is not considered an efficient way of ingesting
     samples. Use it with caution for specific low-volume use cases. It is not
     suitable for replacing the ingestion via scraping and turning Prometheus
     into a push-based metrics collection system. For more information see
     https://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver
     It requires Prometheus >= v2.33.0.

   enforcedBodySizeLimit	<string>
     When defined, enforcedBodySizeLimit specifies a global limit on the size of
     uncompressed response body that will be accepted by Prometheus. Targets
     responding with a body larger than this many bytes will cause the scrape to
     fail. It requires Prometheus >= v2.28.0.

   enforcedKeepDroppedTargets	<integer>
     When defined, enforcedKeepDroppedTargets specifies a global limit on the
     number of targets dropped by relabeling that will be kept in memory. The
     value overrides any `spec.keepDroppedTargets` set by ServiceMonitor,
     PodMonitor, Probe objects unless `spec.keepDroppedTargets` is greater than
     zero and less than `spec.enforcedKeepDroppedTargets`. It requires
     Prometheus >= v2.47.0.

   enforcedLabelLimit	<integer>
     When defined, enforcedLabelLimit specifies a global limit on the number of
     labels per sample. The value overrides any `spec.labelLimit` set by
     ServiceMonitor, PodMonitor, Probe objects unless `spec.labelLimit` is
     greater than zero and less than `spec.enforcedLabelLimit`. It requires
     Prometheus >= v2.27.0.

   enforcedLabelNameLengthLimit	<integer>
     When defined, enforcedLabelNameLengthLimit specifies a global limit on the
     length of labels name per sample. The value overrides any
     `spec.labelNameLengthLimit` set by ServiceMonitor, PodMonitor, Probe
     objects unless `spec.labelNameLengthLimit` is greater than zero and less
     than `spec.enforcedLabelNameLengthLimit`. It requires Prometheus >=
     v2.27.0.

   enforcedLabelValueLengthLimit	<integer>
     When not null, enforcedLabelValueLengthLimit defines a global limit on the
     length of labels value per sample. The value overrides any
     `spec.labelValueLengthLimit` set by ServiceMonitor, PodMonitor, Probe
     objects unless `spec.labelValueLengthLimit` is greater than zero and less
     than `spec.enforcedLabelValueLengthLimit`. It requires Prometheus >=
     v2.27.0.

   enforcedNamespaceLabel	<string>
     When not empty, a label will be added to
     1. All metrics scraped from `ServiceMonitor`, `PodMonitor`, `Probe` and
     `ScrapeConfig` objects. 2. All metrics generated from recording rules
     defined in `PrometheusRule` objects. 3. All alerts generated from alerting
     rules defined in `PrometheusRule` objects. 4. All vector selectors of
     PromQL expressions defined in `PrometheusRule` objects. The label will not
     added for objects referenced in `spec.excludedFromEnforcement`. The label's
     name is this field's value. The label's value is the namespace of the
     `ServiceMonitor`, `PodMonitor`, `Probe` or `PrometheusRule` object.

   enforcedSampleLimit	<integer>
     When defined, enforcedSampleLimit specifies a global limit on the number of
     scraped samples that will be accepted. This overrides any
     `spec.sampleLimit` set by ServiceMonitor, PodMonitor, Probe objects unless
     `spec.sampleLimit` is greater than zero and less than than
     `spec.enforcedSampleLimit`. It is meant to be used by admins to keep the
     overall number of samples/series under a desired limit.

   enforcedTargetLimit	<integer>
     When defined, enforcedTargetLimit specifies a global limit on the number of
     scraped targets. The value overrides any `spec.targetLimit` set by
     ServiceMonitor, PodMonitor, Probe objects unless `spec.targetLimit` is
     greater than zero and less than `spec.enforcedTargetLimit`. It is meant to
     be used by admins to to keep the overall number of targets under a desired
     limit.

   excludedFromEnforcement	<[]Object>
     List of references to PodMonitor, ServiceMonitor, Probe and PrometheusRule
     objects to be excluded from enforcing a namespace label of origin. It is
     only applicable if `spec.enforcedNamespaceLabel` set to true.

   externalLabels	<map[string]string>
     The labels to add to any time series or alerts when communicating with
     external systems (federation, remote storage, Alertmanager). Labels defined
     by `spec.replicaExternalLabelName` and `spec.prometheusExternalLabelName`
     take precedence over this list.

   externalUrl	<string>
     The external URL under which the Prometheus service is externally
     available. This is necessary to generate correct URLs (for instance if
     Prometheus is accessible behind an Ingress resource).

   hostAliases	<[]Object>
     Optional list of hosts and IPs that will be injected into the Pod's hosts
     file if specified.

   hostNetwork	<boolean>
     Use the host's network namespace if true. Make sure to understand the
     security implications if you want to enable it
     (https://kubernetes.io/docs/concepts/configuration/overview/). When
     hostNetwork is enabled, this will set the DNS policy to
     `ClusterFirstWithHostNet` automatically.

   ignoreNamespaceSelectors	<boolean>
     When true, `spec.namespaceSelector` from all PodMonitor, ServiceMonitor and
     Probe objects will be ignored. They will only discover targets within the
     namespace of the PodMonitor, ServiceMonitor and Probe object.

   image	<string>
     Container image name for Prometheus. If specified, it takes precedence over
     the `spec.baseImage`, `spec.tag` and `spec.sha` fields. Specifying
     `spec.version` is still necessary to ensure the Prometheus Operator knows
     which version of Prometheus is being configured. If neither `spec.image`
     nor `spec.baseImage` are defined, the operator will use the latest upstream
     version of Prometheus available at the time when the operator was released.

   imagePullPolicy	<string>
     Image pull policy for the 'prometheus', 'init-config-reloader' and
     'config-reloader' containers. See
     https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
     for more details.

   imagePullSecrets	<[]Object>
     An optional list of references to Secrets in the same namespace to use for
     pulling images from registries. See
     http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod

   initContainers	<[]Object>
     InitContainers allows injecting initContainers to the Pod definition. Those
     can be used to e.g. fetch secrets for injection into the Prometheus
     configuration from external sources. Any errors during the execution of an
     initContainer will lead to a restart of the Pod. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     InitContainers described here modify an operator generated init containers
     if they share the same name and modifications are done via a strategic
     merge patch. The names of init container name managed by the operator are:
     * `init-config-reloader`. Overriding init containers is entirely outside
     the scope of what the maintainers will support and by doing so, you accept
     that this behaviour may break at any time without notice.

   keepDroppedTargets	<integer>
     Per-scrape limit on the number of targets dropped by relabeling that will
     be kept in memory. 0 means no limit. It requires Prometheus >= v2.47.0.

   labelLimit	<integer>
     Per-scrape limit on number of labels that will be accepted for a sample.
     Only valid in Prometheus versions 2.45.0 and newer.

   labelNameLengthLimit	<integer>
     Per-scrape limit on length of labels name that will be accepted for a
     sample. Only valid in Prometheus versions 2.45.0 and newer.

   labelValueLengthLimit	<integer>
     Per-scrape limit on length of labels value that will be accepted for a
     sample. Only valid in Prometheus versions 2.45.0 and newer.

   listenLocal	<boolean>
     When true, the Prometheus server listens on the loopback address instead of
     the Pod IP's address.

   logFormat	<string>
     Log format for Log level for Prometheus and the config-reloader sidecar.

   logLevel	<string>
     Log level for Prometheus and the config-reloader sidecar.

   minReadySeconds	<integer>
     Minimum number of seconds for which a newly created Pod should be ready
     without any of its container crashing for it to be considered available.
     Defaults to 0 (pod will be considered available as soon as it is ready)
     This is an alpha field from kubernetes 1.22 until 1.24 which requires
     enabling the StatefulSetMinReadySeconds feature gate.

   nodeSelector	<map[string]string>
     Defines on which Nodes the Pods are scheduled.

   overrideHonorLabels	<boolean>
     When true, Prometheus resolves label conflicts by renaming the labels in
     the scraped data to "exported_<label value>" for all targets created from
     service and pod monitors. Otherwise the HonorLabels field of the service or
     pod monitor applies.

   overrideHonorTimestamps	<boolean>
     When true, Prometheus ignores the timestamps for all the targets created
     from service and pod monitors. Otherwise the HonorTimestamps field of the
     service or pod monitor applies.

   paused	<boolean>
     When a Prometheus deployment is paused, no actions except for deletion will
     be performed on the underlying objects.

   podMetadata	<Object>
     PodMetadata configures labels and annotations which are propagated to the
     Prometheus pods.

   podMonitorNamespaceSelector	<Object>
     Namespaces to match for PodMonitors discovery. An empty label selector
     matches all namespaces. A null label selector matches the current namespace
     only.

   podMonitorSelector	<Object>
     *Experimental* PodMonitors to be selected for target discovery. An empty
     label selector matches all objects. A null label selector matches no
     objects. If `spec.serviceMonitorSelector`, `spec.podMonitorSelector`,
     `spec.probeSelector` and `spec.scrapeConfigSelector` are null, the
     Prometheus configuration is unmanaged. The Prometheus operator will ensure
     that the Prometheus configuration's Secret exists, but it is the
     responsibility of the user to provide the raw gzipped Prometheus
     configuration under the `prometheus.yaml.gz` key. This behavior is
     *deprecated* and will be removed in the next major version of the custom
     resource definition. It is recommended to use
     `spec.additionalScrapeConfigs` instead.

   podTargetLabels	<[]string>
     PodTargetLabels are appended to the `spec.podTargetLabels` field of all
     PodMonitor and ServiceMonitor objects.

   portName	<string>
     Port name used for the pods and governing service. Default: "web"

   priorityClassName	<string>
     Priority class assigned to the Pods.

   probeNamespaceSelector	<Object>
     *Experimental* Namespaces to match for Probe discovery. An empty label
     selector matches all namespaces. A null label selector matches the current
     namespace only.

   probeSelector	<Object>
     *Experimental* Probes to be selected for target discovery. An empty label
     selector matches all objects. A null label selector matches no objects. If
     `spec.serviceMonitorSelector`, `spec.podMonitorSelector`,
     `spec.probeSelector` and `spec.scrapeConfigSelector` are null, the
     Prometheus configuration is unmanaged. The Prometheus operator will ensure
     that the Prometheus configuration's Secret exists, but it is the
     responsibility of the user to provide the raw gzipped Prometheus
     configuration under the `prometheus.yaml.gz` key. This behavior is
     *deprecated* and will be removed in the next major version of the custom
     resource definition. It is recommended to use
     `spec.additionalScrapeConfigs` instead.

   prometheusExternalLabelName	<string>
     Name of Prometheus external label used to denote the Prometheus instance
     name. The external label will _not_ be added when the field is set to the
     empty string (`""`). Default: "prometheus"

   remoteWrite	<[]Object>
     Defines the list of remote write configurations.

   replicaExternalLabelName	<string>
     Name of Prometheus external label used to denote the replica name. The
     external label will _not_ be added when the field is set to the empty
     string (`""`). Default: "prometheus_replica"

   replicas	<integer>
     Number of replicas of each shard to deploy for a Prometheus deployment.
     `spec.replicas` multiplied by `spec.shards` is the total number of Pods
     created. Default: 1

   resources	<Object>
     Defines the resources requests and limits of the 'prometheus' container.

   routePrefix	<string>
     The route prefix Prometheus registers HTTP handlers for. This is useful
     when using `spec.externalURL`, and a proxy is rewriting HTTP routes of a
     request, and the actual ExternalURL is still true, but the server serves
     requests under a different route prefix. For example for use with `kubectl
     proxy`.

   sampleLimit	<integer>
     SampleLimit defines per-scrape limit on number of scraped samples that will
     be accepted. Only valid in Prometheus versions 2.45.0 and newer.

   scrapeConfigNamespaceSelector	<Object>
     Namespaces to match for ScrapeConfig discovery. An empty label selector
     matches all namespaces. A null label selector matches the current current
     namespace only.

   scrapeConfigSelector	<Object>
     *Experimental* ScrapeConfigs to be selected for target discovery. An empty
     label selector matches all objects. A null label selector matches no
     objects. If `spec.serviceMonitorSelector`, `spec.podMonitorSelector`,
     `spec.probeSelector` and `spec.scrapeConfigSelector` are null, the
     Prometheus configuration is unmanaged. The Prometheus operator will ensure
     that the Prometheus configuration's Secret exists, but it is the
     responsibility of the user to provide the raw gzipped Prometheus
     configuration under the `prometheus.yaml.gz` key. This behavior is
     *deprecated* and will be removed in the next major version of the custom
     resource definition. It is recommended to use
     `spec.additionalScrapeConfigs` instead.

   scrapeInterval	<string>
     Interval between consecutive scrapes. Default: "30s"

   scrapeTimeout	<string>
     Number of seconds to wait until a scrape request times out.

   secrets	<[]string>
     Secrets is a list of Secrets in the same namespace as the Prometheus
     object, which shall be mounted into the Prometheus Pods. Each Secret is
     added to the StatefulSet definition as a volume named
     `secret-<secret-name>`. The Secrets are mounted into
     /etc/prometheus/secrets/<secret-name> in the 'prometheus' container.

   securityContext	<Object>
     SecurityContext holds pod-level security attributes and common container
     settings. This defaults to the default PodSecurityContext.

   serviceAccountName	<string>
     ServiceAccountName is the name of the ServiceAccount to use to run the
     Prometheus Pods.

   serviceMonitorNamespaceSelector	<Object>
     Namespaces to match for ServicedMonitors discovery. An empty label selector
     matches all namespaces. A null label selector matches the current namespace
     only.

   serviceMonitorSelector	<Object>
     ServiceMonitors to be selected for target discovery. An empty label
     selector matches all objects. A null label selector matches no objects. If
     `spec.serviceMonitorSelector`, `spec.podMonitorSelector`,
     `spec.probeSelector` and `spec.scrapeConfigSelector` are null, the
     Prometheus configuration is unmanaged. The Prometheus operator will ensure
     that the Prometheus configuration's Secret exists, but it is the
     responsibility of the user to provide the raw gzipped Prometheus
     configuration under the `prometheus.yaml.gz` key. This behavior is
     *deprecated* and will be removed in the next major version of the custom
     resource definition. It is recommended to use
     `spec.additionalScrapeConfigs` instead.

   shards	<integer>
     EXPERIMENTAL: Number of shards to distribute targets onto. `spec.replicas`
     multiplied by `spec.shards` is the total number of Pods created. Note that
     scaling down shards will not reshard data onto remaining instances, it must
     be manually moved. Increasing shards will not reshard data either but it
     will continue to be available from the same instances. To query globally,
     use Thanos sidecar and Thanos querier or remote write data to a central
     location. Sharding is performed on the content of the `__address__` target
     meta-label for PodMonitors and ServiceMonitors and `__param_target__` for
     Probes. Default: 1

   storage	<Object>
     Storage defines the storage used by Prometheus.

   targetLimit	<integer>
     TargetLimit defines a limit on the number of scraped targets that will be
     accepted. Only valid in Prometheus versions 2.45.0 and newer.

   tolerations	<[]Object>
     Defines the Pods' tolerations if specified.

   topologySpreadConstraints	<[]Object>
     Defines the pod's topology spread constraints if specified.

   tracingConfig	<Object>
     EXPERIMENTAL: TracingConfig configures tracing in Prometheus. This is an
     experimental feature, it may change in any upcoming release in a breaking
     way.

   version	<string>
     Version of Prometheus being deployed. The operator uses this information to
     generate the Prometheus StatefulSet + configuration files. If not
     specified, the operator assumes the latest upstream version of Prometheus
     available at the time when the version of the operator was released.

   volumeMounts	<[]Object>
     VolumeMounts allows the configuration of additional VolumeMounts.
     VolumeMounts will be appended to other VolumeMounts in the 'prometheus'
     container, that are generated as a result of StorageSpec objects.

   volumes	<[]Object>
     Volumes allows the configuration of additional volumes on the output
     StatefulSet definition. Volumes specified will be appended to other volumes
     that are generated as a result of StorageSpec objects.

   walCompression	<boolean>
     Configures compression of the write-ahead log (WAL) using Snappy. WAL
     compression is enabled by default for Prometheus >= 2.20.0 Requires
     Prometheus v2.11.0 and above.

   web	<Object>
     Defines the configuration of the Prometheus web server.

KIND:     Prometheus
VERSION:  monitoring.coreos.com/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of the Prometheus cluster. More info:
     https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

FIELDS:
   additionalAlertManagerConfigs	<Object>
     AdditionalAlertManagerConfigs specifies a key of a Secret containing
     additional Prometheus Alertmanager configurations. The Alertmanager
     configurations are appended to the configuration generated by the
     Prometheus Operator. They must be formatted according to the official
     Prometheus documentation:
     https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config
     The user is responsible for making sure that the configurations are valid
     Note that using this feature may expose the possibility to break upgrades
     of Prometheus. It is advised to review Prometheus release notes to ensure
     that no incompatible AlertManager configs are going to break Prometheus
     after the upgrade.

   additionalAlertRelabelConfigs	<Object>
     AdditionalAlertRelabelConfigs specifies a key of a Secret containing
     additional Prometheus alert relabel configurations. The alert relabel
     configurations are appended to the configuration generated by the
     Prometheus Operator. They must be formatted according to the official
     Prometheus documentation:
     https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs
     The user is responsible for making sure that the configurations are valid
     Note that using this feature may expose the possibility to break upgrades
     of Prometheus. It is advised to review Prometheus release notes to ensure
     that no incompatible alert relabel configs are going to break Prometheus
     after the upgrade.

   additionalArgs	<[]Object>
     AdditionalArgs allows setting additional arguments for the 'prometheus'
     container. It is intended for e.g. activating hidden flags which are not
     supported by the dedicated configuration options yet. The arguments are
     passed as-is to the Prometheus container which may cause issues if they are
     invalid or not supported by the given Prometheus version. In case of an
     argument conflict (e.g. an argument which is already set by the operator
     itself) or when providing an invalid argument, the reconciliation will fail
     and an error will be logged.

   additionalScrapeConfigs	<Object>
     AdditionalScrapeConfigs allows specifying a key of a Secret containing
     additional Prometheus scrape configurations. Scrape configurations
     specified are appended to the configurations generated by the Prometheus
     Operator. Job configurations specified must have the form as specified in
     the official Prometheus documentation:
     https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config.
     As scrape configs are appended, the user is responsible to make sure it is
     valid. Note that using this feature may expose the possibility to break
     upgrades of Prometheus. It is advised to review Prometheus release notes to
     ensure that no incompatible scrape configs are going to break Prometheus
     after the upgrade.

   affinity	<Object>
     Defines the Pods' affinity scheduling rules if specified.

   alerting	<Object>
     Defines the settings related to Alertmanager.

   allowOverlappingBlocks	<boolean>
     AllowOverlappingBlocks enables vertical compaction and vertical query merge
     in Prometheus. *Deprecated: this flag has no effect for Prometheus >=
     2.39.0 where overlapping blocks are enabled by default.*

   apiserverConfig	<Object>
     APIServerConfig allows specifying a host and auth methods to access the
     Kuberntees API server. If null, Prometheus is assumed to run inside of the
     cluster: it will discover the API servers automatically and use the Pod's
     CA certificate and bearer token file at
     /var/run/secrets/kubernetes.io/serviceaccount/.

   arbitraryFSAccessThroughSMs	<Object>
     When true, ServiceMonitor, PodMonitor and Probe object are forbidden to
     reference arbitrary files on the file system of the 'prometheus' container.
     When a ServiceMonitor's endpoint specifies a `bearerTokenFile` value (e.g.
     '/var/run/secrets/kubernetes.io/serviceaccount/token'), a malicious target
     can get access to the Prometheus service account's token in the Prometheus'
     scrape request. Setting `spec.arbitraryFSAccessThroughSM` to 'true' would
     prevent the attack. Users should instead provide the credentials using the
     `spec.bearerTokenSecret` field.

   baseImage	<string>
     *Deprecated: use 'spec.image' instead.*

   bodySizeLimit	<string>
     BodySizeLimit defines per-scrape on response body size. Only valid in
     Prometheus versions 2.45.0 and newer.

   configMaps	<[]string>
     ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus
     object, which shall be mounted into the Prometheus Pods. Each ConfigMap is
     added to the StatefulSet definition as a volume named
     `configmap-<configmap-name>`. The ConfigMaps are mounted into
     /etc/prometheus/configmaps/<configmap-name> in the 'prometheus' container.

   containers	<[]Object>
     Containers allows injecting additional containers or modifying operator
     generated containers. This can be used to allow adding an authentication
     proxy to the Pods or to change the behavior of an operator generated
     container. Containers described here modify an operator generated container
     if they share the same name and modifications are done via a strategic
     merge patch. The names of containers managed by the operator are: *
     `prometheus` * `config-reloader` * `thanos-sidecar` Overriding containers
     is entirely outside the scope of what the maintainers will support and by
     doing so, you accept that this behaviour may break at any time without
     notice.

   disableCompaction	<boolean>
     When true, the Prometheus compaction is disabled.

   enableAdminAPI	<boolean>
     Enables access to the Prometheus web admin API. WARNING: Enabling the admin
     APIs enables mutating endpoints, to delete data, shutdown Prometheus, and
     more. Enabling this should be done with care and the user is advised to add
     additional authentication authorization via a proxy to ensure only clients
     authorized to perform these actions can do so. For more information:
     https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis

   enableFeatures	<[]string>
     Enable access to Prometheus feature flags. By default, no features are
     enabled. Enabling features which are disabled by default is entirely
     outside the scope of what the maintainers will support and by doing so, you
     accept that this behaviour may break at any time without notice. For more
     information see https://prometheus.io/docs/prometheus/latest/feature_flags/

   enableRemoteWriteReceiver	<boolean>
     Enable Prometheus to be used as a receiver for the Prometheus remote write
     protocol. WARNING: This is not considered an efficient way of ingesting
     samples. Use it with caution for specific low-volume use cases. It is not
     suitable for replacing the ingestion via scraping and turning Prometheus
     into a push-based metrics collection system. For more information see
     https://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver
     It requires Prometheus >= v2.33.0.

   enforcedBodySizeLimit	<string>
     When defined, enforcedBodySizeLimit specifies a global limit on the size of
     uncompressed response body that will be accepted by Prometheus. Targets
     responding with a body larger than this many bytes will cause the scrape to
     fail. It requires Prometheus >= v2.28.0.

   enforcedKeepDroppedTargets	<integer>
     When defined, enforcedKeepDroppedTargets specifies a global limit on the
     number of targets dropped by relabeling that will be kept in memory. The
     value overrides any `spec.keepDroppedTargets` set by ServiceMonitor,
     PodMonitor, Probe objects unless `spec.keepDroppedTargets` is greater than
     zero and less than `spec.enforcedKeepDroppedTargets`. It requires
     Prometheus >= v2.47.0.

   enforcedLabelLimit	<integer>
     When defined, enforcedLabelLimit specifies a global limit on the number of
     labels per sample. The value overrides any `spec.labelLimit` set by
     ServiceMonitor, PodMonitor, Probe objects unless `spec.labelLimit` is
     greater than zero and less than `spec.enforcedLabelLimit`. It requires
     Prometheus >= v2.27.0.

   enforcedLabelNameLengthLimit	<integer>
     When defined, enforcedLabelNameLengthLimit specifies a global limit on the
     length of labels name per sample. The value overrides any
     `spec.labelNameLengthLimit` set by ServiceMonitor, PodMonitor, Probe
     objects unless `spec.labelNameLengthLimit` is greater than zero and less
     than `spec.enforcedLabelNameLengthLimit`. It requires Prometheus >=
     v2.27.0.

   enforcedLabelValueLengthLimit	<integer>
     When not null, enforcedLabelValueLengthLimit defines a global limit on the
     length of labels value per sample. The value overrides any
     `spec.labelValueLengthLimit` set by ServiceMonitor, PodMonitor, Probe
     objects unless `spec.labelValueLengthLimit` is greater than zero and less
     than `spec.enforcedLabelValueLengthLimit`. It requires Prometheus >=
     v2.27.0.

   enforcedNamespaceLabel	<string>
     When not empty, a label will be added to
     1. All metrics scraped from `ServiceMonitor`, `PodMonitor`, `Probe` and
     `ScrapeConfig` objects. 2. All metrics generated from recording rules
     defined in `PrometheusRule` objects. 3. All alerts generated from alerting
     rules defined in `PrometheusRule` objects. 4. All vector selectors of
     PromQL expressions defined in `PrometheusRule` objects. The label will not
     added for objects referenced in `spec.excludedFromEnforcement`. The label's
     name is this field's value. The label's value is the namespace of the
     `ServiceMonitor`, `PodMonitor`, `Probe` or `PrometheusRule` object.

   enforcedSampleLimit	<integer>
     When defined, enforcedSampleLimit specifies a global limit on the number of
     scraped samples that will be accepted. This overrides any
     `spec.sampleLimit` set by ServiceMonitor, PodMonitor, Probe objects unless
     `spec.sampleLimit` is greater than zero and less than than
     `spec.enforcedSampleLimit`. It is meant to be used by admins to keep the
     overall number of samples/series under a desired limit.

   enforcedTargetLimit	<integer>
     When defined, enforcedTargetLimit specifies a global limit on the number of
     scraped targets. The value overrides any `spec.targetLimit` set by
     ServiceMonitor, PodMonitor, Probe objects unless `spec.targetLimit` is
     greater than zero and less than `spec.enforcedTargetLimit`. It is meant to
     be used by admins to to keep the overall number of targets under a desired
     limit.

   evaluationInterval	<string>
     Interval between rule evaluations. Default: "30s"

   excludedFromEnforcement	<[]Object>
     List of references to PodMonitor, ServiceMonitor, Probe and PrometheusRule
     objects to be excluded from enforcing a namespace label of origin. It is
     only applicable if `spec.enforcedNamespaceLabel` set to true.

   exemplars	<Object>
     Exemplars related settings that are runtime reloadable. It requires to
     enable the `exemplar-storage` feature flag to be effective.

   externalLabels	<map[string]string>
     The labels to add to any time series or alerts when communicating with
     external systems (federation, remote storage, Alertmanager). Labels defined
     by `spec.replicaExternalLabelName` and `spec.prometheusExternalLabelName`
     take precedence over this list.

   externalUrl	<string>
     The external URL under which the Prometheus service is externally
     available. This is necessary to generate correct URLs (for instance if
     Prometheus is accessible behind an Ingress resource).

   hostAliases	<[]Object>
     Optional list of hosts and IPs that will be injected into the Pod's hosts
     file if specified.

   hostNetwork	<boolean>
     Use the host's network namespace if true. Make sure to understand the
     security implications if you want to enable it
     (https://kubernetes.io/docs/concepts/configuration/overview/). When
     hostNetwork is enabled, this will set the DNS policy to
     `ClusterFirstWithHostNet` automatically.

   ignoreNamespaceSelectors	<boolean>
     When true, `spec.namespaceSelector` from all PodMonitor, ServiceMonitor and
     Probe objects will be ignored. They will only discover targets within the
     namespace of the PodMonitor, ServiceMonitor and Probe object.

   image	<string>
     Container image name for Prometheus. If specified, it takes precedence over
     the `spec.baseImage`, `spec.tag` and `spec.sha` fields. Specifying
     `spec.version` is still necessary to ensure the Prometheus Operator knows
     which version of Prometheus is being configured. If neither `spec.image`
     nor `spec.baseImage` are defined, the operator will use the latest upstream
     version of Prometheus available at the time when the operator was released.

   imagePullPolicy	<string>
     Image pull policy for the 'prometheus', 'init-config-reloader' and
     'config-reloader' containers. See
     https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
     for more details.

   imagePullSecrets	<[]Object>
     An optional list of references to Secrets in the same namespace to use for
     pulling images from registries. See
     http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod

   initContainers	<[]Object>
     InitContainers allows injecting initContainers to the Pod definition. Those
     can be used to e.g. fetch secrets for injection into the Prometheus
     configuration from external sources. Any errors during the execution of an
     initContainer will lead to a restart of the Pod. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     InitContainers described here modify an operator generated init containers
     if they share the same name and modifications are done via a strategic
     merge patch. The names of init container name managed by the operator are:
     * `init-config-reloader`. Overriding init containers is entirely outside
     the scope of what the maintainers will support and by doing so, you accept
     that this behaviour may break at any time without notice.

   keepDroppedTargets	<integer>
     Per-scrape limit on the number of targets dropped by relabeling that will
     be kept in memory. 0 means no limit. It requires Prometheus >= v2.47.0.

   labelLimit	<integer>
     Per-scrape limit on number of labels that will be accepted for a sample.
     Only valid in Prometheus versions 2.45.0 and newer.

   labelNameLengthLimit	<integer>
     Per-scrape limit on length of labels name that will be accepted for a
     sample. Only valid in Prometheus versions 2.45.0 and newer.

   labelValueLengthLimit	<integer>
     Per-scrape limit on length of labels value that will be accepted for a
     sample. Only valid in Prometheus versions 2.45.0 and newer.

   listenLocal	<boolean>
     When true, the Prometheus server listens on the loopback address instead of
     the Pod IP's address.

   logFormat	<string>
     Log format for Log level for Prometheus and the config-reloader sidecar.

   logLevel	<string>
     Log level for Prometheus and the config-reloader sidecar.

   minReadySeconds	<integer>
     Minimum number of seconds for which a newly created Pod should be ready
     without any of its container crashing for it to be considered available.
     Defaults to 0 (pod will be considered available as soon as it is ready)
     This is an alpha field from kubernetes 1.22 until 1.24 which requires
     enabling the StatefulSetMinReadySeconds feature gate.

   nodeSelector	<map[string]string>
     Defines on which Nodes the Pods are scheduled.

   overrideHonorLabels	<boolean>
     When true, Prometheus resolves label conflicts by renaming the labels in
     the scraped data to "exported_<label value>" for all targets created from
     service and pod monitors. Otherwise the HonorLabels field of the service or
     pod monitor applies.

   overrideHonorTimestamps	<boolean>
     When true, Prometheus ignores the timestamps for all the targets created
     from service and pod monitors. Otherwise the HonorTimestamps field of the
     service or pod monitor applies.

   paused	<boolean>
     When a Prometheus deployment is paused, no actions except for deletion will
     be performed on the underlying objects.

   podMetadata	<Object>
     PodMetadata configures labels and annotations which are propagated to the
     Prometheus pods.

   podMonitorNamespaceSelector	<Object>
     Namespaces to match for PodMonitors discovery. An empty label selector
     matches all namespaces. A null label selector matches the current namespace
     only.

   podMonitorSelector	<Object>
     *Experimental* PodMonitors to be selected for target discovery. An empty
     label selector matches all objects. A null label selector matches no
     objects. If `spec.serviceMonitorSelector`, `spec.podMonitorSelector`,
     `spec.probeSelector` and `spec.scrapeConfigSelector` are null, the
     Prometheus configuration is unmanaged. The Prometheus operator will ensure
     that the Prometheus configuration's Secret exists, but it is the
     responsibility of the user to provide the raw gzipped Prometheus
     configuration under the `prometheus.yaml.gz` key. This behavior is
     *deprecated* and will be removed in the next major version of the custom
     resource definition. It is recommended to use
     `spec.additionalScrapeConfigs` instead.

   podTargetLabels	<[]string>
     PodTargetLabels are appended to the `spec.podTargetLabels` field of all
     PodMonitor and ServiceMonitor objects.

   portName	<string>
     Port name used for the pods and governing service. Default: "web"

   priorityClassName	<string>
     Priority class assigned to the Pods.

   probeNamespaceSelector	<Object>
     *Experimental* Namespaces to match for Probe discovery. An empty label
     selector matches all namespaces. A null label selector matches the current
     namespace only.

   probeSelector	<Object>
     *Experimental* Probes to be selected for target discovery. An empty label
     selector matches all objects. A null label selector matches no objects. If
     `spec.serviceMonitorSelector`, `spec.podMonitorSelector`,
     `spec.probeSelector` and `spec.scrapeConfigSelector` are null, the
     Prometheus configuration is unmanaged. The Prometheus operator will ensure
     that the Prometheus configuration's Secret exists, but it is the
     responsibility of the user to provide the raw gzipped Prometheus
     configuration under the `prometheus.yaml.gz` key. This behavior is
     *deprecated* and will be removed in the next major version of the custom
     resource definition. It is recommended to use
     `spec.additionalScrapeConfigs` instead.

   prometheusExternalLabelName	<string>
     Name of Prometheus external label used to denote the Prometheus instance
     name. The external label will _not_ be added when the field is set to the
     empty string (`""`). Default: "prometheus"

   prometheusRulesExcludedFromEnforce	<[]Object>
     Defines the list of PrometheusRule objects to which the namespace label
     enforcement doesn't apply. This is only relevant when
     `spec.enforcedNamespaceLabel` is set to true. *Deprecated: use
     `spec.excludedFromEnforcement` instead.*

   query	<Object>
     QuerySpec defines the configuration of the Promethus query service.

   queryLogFile	<string>
     queryLogFile specifies where the file to which PromQL queries are logged.
     If the filename has an empty path, e.g. 'query.log', The Prometheus Pods
     will mount the file into an emptyDir volume at `/var/log/prometheus`. If a
     full path is provided, e.g. '/var/log/prometheus/query.log', you must mount
     a volume in the specified directory and it must be writable. This is
     because the prometheus container runs with a read-only root filesystem for
     security reasons. Alternatively, the location can be set to a standard I/O
     stream, e.g. `/dev/stdout`, to log query information to the default
     Prometheus log stream.

   remoteRead	<[]Object>
     Defines the list of remote read configurations.

   remoteWrite	<[]Object>
     Defines the list of remote write configurations.

   replicaExternalLabelName	<string>
     Name of Prometheus external label used to denote the replica name. The
     external label will _not_ be added when the field is set to the empty
     string (`""`). Default: "prometheus_replica"

   replicas	<integer>
     Number of replicas of each shard to deploy for a Prometheus deployment.
     `spec.replicas` multiplied by `spec.shards` is the total number of Pods
     created. Default: 1

   resources	<Object>
     Defines the resources requests and limits of the 'prometheus' container.

   retention	<string>
     How long to retain the Prometheus data. Default: "24h" if `spec.retention`
     and `spec.retentionSize` are empty.

   retentionSize	<string>
     Maximum number of bytes used by the Prometheus data.

   routePrefix	<string>
     The route prefix Prometheus registers HTTP handlers for. This is useful
     when using `spec.externalURL`, and a proxy is rewriting HTTP routes of a
     request, and the actual ExternalURL is still true, but the server serves
     requests under a different route prefix. For example for use with `kubectl
     proxy`.

   ruleNamespaceSelector	<Object>
     Namespaces to match for PrometheusRule discovery. An empty label selector
     matches all namespaces. A null label selector matches the current namespace
     only.

   ruleSelector	<Object>
     PrometheusRule objects to be selected for rule evaluation. An empty label
     selector matches all objects. A null label selector matches no objects.

   rules	<Object>
     Defines the configuration of the Prometheus rules' engine.

   sampleLimit	<integer>
     SampleLimit defines per-scrape limit on number of scraped samples that will
     be accepted. Only valid in Prometheus versions 2.45.0 and newer.

   scrapeConfigNamespaceSelector	<Object>
     Namespaces to match for ScrapeConfig discovery. An empty label selector
     matches all namespaces. A null label selector matches the current current
     namespace only.

   scrapeConfigSelector	<Object>
     *Experimental* ScrapeConfigs to be selected for target discovery. An empty
     label selector matches all objects. A null label selector matches no
     objects. If `spec.serviceMonitorSelector`, `spec.podMonitorSelector`,
     `spec.probeSelector` and `spec.scrapeConfigSelector` are null, the
     Prometheus configuration is unmanaged. The Prometheus operator will ensure
     that the Prometheus configuration's Secret exists, but it is the
     responsibility of the user to provide the raw gzipped Prometheus
     configuration under the `prometheus.yaml.gz` key. This behavior is
     *deprecated* and will be removed in the next major version of the custom
     resource definition. It is recommended to use
     `spec.additionalScrapeConfigs` instead.

   scrapeInterval	<string>
     Interval between consecutive scrapes. Default: "30s"

   scrapeTimeout	<string>
     Number of seconds to wait until a scrape request times out.

   secrets	<[]string>
     Secrets is a list of Secrets in the same namespace as the Prometheus
     object, which shall be mounted into the Prometheus Pods. Each Secret is
     added to the StatefulSet definition as a volume named
     `secret-<secret-name>`. The Secrets are mounted into
     /etc/prometheus/secrets/<secret-name> in the 'prometheus' container.

   securityContext	<Object>
     SecurityContext holds pod-level security attributes and common container
     settings. This defaults to the default PodSecurityContext.

   serviceAccountName	<string>
     ServiceAccountName is the name of the ServiceAccount to use to run the
     Prometheus Pods.

   serviceMonitorNamespaceSelector	<Object>
     Namespaces to match for ServicedMonitors discovery. An empty label selector
     matches all namespaces. A null label selector matches the current namespace
     only.

   serviceMonitorSelector	<Object>
     ServiceMonitors to be selected for target discovery. An empty label
     selector matches all objects. A null label selector matches no objects. If
     `spec.serviceMonitorSelector`, `spec.podMonitorSelector`,
     `spec.probeSelector` and `spec.scrapeConfigSelector` are null, the
     Prometheus configuration is unmanaged. The Prometheus operator will ensure
     that the Prometheus configuration's Secret exists, but it is the
     responsibility of the user to provide the raw gzipped Prometheus
     configuration under the `prometheus.yaml.gz` key. This behavior is
     *deprecated* and will be removed in the next major version of the custom
     resource definition. It is recommended to use
     `spec.additionalScrapeConfigs` instead.

   sha	<string>
     *Deprecated: use 'spec.image' instead. The image's digest can be specified
     as part of the image name.*

   shards	<integer>
     EXPERIMENTAL: Number of shards to distribute targets onto. `spec.replicas`
     multiplied by `spec.shards` is the total number of Pods created. Note that
     scaling down shards will not reshard data onto remaining instances, it must
     be manually moved. Increasing shards will not reshard data either but it
     will continue to be available from the same instances. To query globally,
     use Thanos sidecar and Thanos querier or remote write data to a central
     location. Sharding is performed on the content of the `__address__` target
     meta-label for PodMonitors and ServiceMonitors and `__param_target__` for
     Probes. Default: 1

   storage	<Object>
     Storage defines the storage used by Prometheus.

   tag	<string>
     *Deprecated: use 'spec.image' instead. The image's tag can be specified as
     part of the image name.*

   targetLimit	<integer>
     TargetLimit defines a limit on the number of scraped targets that will be
     accepted. Only valid in Prometheus versions 2.45.0 and newer.

   thanos	<Object>
     Defines the configuration of the optional Thanos sidecar. This section is
     experimental, it may change significantly without deprecation notice in any
     release.

   tolerations	<[]Object>
     Defines the Pods' tolerations if specified.

   topologySpreadConstraints	<[]Object>
     Defines the pod's topology spread constraints if specified.

   tracingConfig	<Object>
     EXPERIMENTAL: TracingConfig configures tracing in Prometheus. This is an
     experimental feature, it may change in any upcoming release in a breaking
     way.

   tsdb	<Object>
     Defines the runtime reloadable configuration of the timeseries database
     (TSDB).

   version	<string>
     Version of Prometheus being deployed. The operator uses this information to
     generate the Prometheus StatefulSet + configuration files. If not
     specified, the operator assumes the latest upstream version of Prometheus
     available at the time when the version of the operator was released.

   volumeMounts	<[]Object>
     VolumeMounts allows the configuration of additional VolumeMounts.
     VolumeMounts will be appended to other VolumeMounts in the 'prometheus'
     container, that are generated as a result of StorageSpec objects.

   volumes	<[]Object>
     Volumes allows the configuration of additional volumes on the output
     StatefulSet definition. Volumes specified will be appended to other volumes
     that are generated as a result of StorageSpec objects.

   walCompression	<boolean>
     Configures compression of the write-ahead log (WAL) using Snappy. WAL
     compression is enabled by default for Prometheus >= 2.20.0 Requires
     Prometheus v2.11.0 and above.

   web	<Object>
     Defines the configuration of the Prometheus web server.

KIND:     PrometheusRule
VERSION:  monitoring.coreos.com/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of desired alerting rule definitions for Prometheus.

FIELDS:
   groups	<[]Object>
     Content of Prometheus rule file

KIND:     ScrapeConfig
VERSION:  monitoring.coreos.com/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     ScrapeConfigSpec is a specification of the desired configuration for a
     scrape configuration.

FIELDS:
   authorization	<Object>
     Authorization header to use on every scrape request.

   basicAuth	<Object>
     BasicAuth information to use on every scrape request.

   consulSDConfigs	<[]Object>
     ConsulSDConfigs defines a list of Consul service discovery configurations.

   dnsSDConfigs	<[]Object>
     DNSSDConfigs defines a list of DNS service discovery configurations.

   ec2SDConfigs	<[]Object>
     EC2SDConfigs defines a list of EC2 service discovery configurations.

   fileSDConfigs	<[]Object>
     FileSDConfigs defines a list of file service discovery configurations.

   honorLabels	<boolean>
     HonorLabels chooses the metric's labels on collisions with target labels.

   honorTimestamps	<boolean>
     HonorTimestamps controls whether Prometheus respects the timestamps present
     in scraped data.

   httpSDConfigs	<[]Object>
     HTTPSDConfigs defines a list of HTTP service discovery configurations.

   keepDroppedTargets	<integer>
     Per-scrape limit on the number of targets dropped by relabeling that will
     be kept in memory. 0 means no limit. It requires Prometheus >= v2.47.0.

   kubernetesSDConfigs	<[]Object>
     KubernetesSDConfigs defines a list of Kubernetes service discovery
     configurations.

   labelLimit	<integer>
     Per-scrape limit on number of labels that will be accepted for a sample.
     Only valid in Prometheus versions 2.27.0 and newer.

   labelNameLengthLimit	<integer>
     Per-scrape limit on length of labels name that will be accepted for a
     sample. Only valid in Prometheus versions 2.27.0 and newer.

   labelValueLengthLimit	<integer>
     Per-scrape limit on length of labels value that will be accepted for a
     sample. Only valid in Prometheus versions 2.27.0 and newer.

   metricRelabelings	<[]Object>
     MetricRelabelConfigs to apply to samples before ingestion.

   metricsPath	<string>
     MetricsPath HTTP path to scrape for metrics. If empty, Prometheus uses the
     default value (e.g. /metrics).

   params	<map[string][]string>
     Optional HTTP URL parameters

   relabelings	<[]Object>
     RelabelConfigs defines how to rewrite the target's labels before scraping.
     Prometheus Operator automatically adds relabelings for a few standard
     Kubernetes fields. The original scrape job's name is available via the
     `__tmp_prometheus_job_name` label. More info:
     https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

   sampleLimit	<integer>
     SampleLimit defines per-scrape limit on number of scraped samples that will
     be accepted.

   scheme	<string>
     Configures the protocol scheme used for requests. If empty, Prometheus uses
     HTTP by default.

   scrapeInterval	<string>
     ScrapeInterval is the interval between consecutive scrapes.

   scrapeTimeout	<string>
     ScrapeTimeout is the number of seconds to wait until a scrape request times
     out.

   staticConfigs	<[]Object>
     StaticConfigs defines a list of static targets with a common label set.

   targetLimit	<integer>
     TargetLimit defines a limit on the number of scraped targets that will be
     accepted.

   tlsConfig	<Object>
     TLS configuration to use on every scrape request

KIND:     ServiceMonitor
VERSION:  monitoring.coreos.com/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of desired Service selection for target discovery by
     Prometheus.

FIELDS:
   attachMetadata	<Object>
     Attaches node metadata to discovered targets. Requires Prometheus v2.37.0
     and above.

   endpoints	<[]Object> -required-
     A list of endpoints allowed as part of this ServiceMonitor.

   jobLabel	<string>
     JobLabel selects the label from the associated Kubernetes service which
     will be used as the `job` label for all metrics. For example: If in
     `ServiceMonitor.spec.jobLabel: foo` and in `Service.metadata.labels.foo:
     bar`, then the `job="bar"` label is added to all metrics. If the value of
     this field is empty or if the label doesn't exist for the given Service,
     the `job` label of the metrics defaults to the name of the Kubernetes
     Service.

   keepDroppedTargets	<integer>
     Per-scrape limit on the number of targets dropped by relabeling that will
     be kept in memory. 0 means no limit. It requires Prometheus >= v2.47.0.

   labelLimit	<integer>
     Per-scrape limit on number of labels that will be accepted for a sample.
     Only valid in Prometheus versions 2.27.0 and newer.

   labelNameLengthLimit	<integer>
     Per-scrape limit on length of labels name that will be accepted for a
     sample. Only valid in Prometheus versions 2.27.0 and newer.

   labelValueLengthLimit	<integer>
     Per-scrape limit on length of labels value that will be accepted for a
     sample. Only valid in Prometheus versions 2.27.0 and newer.

   namespaceSelector	<Object>
     Selector to select which namespaces the Kubernetes Endpoints objects are
     discovered from.

   podTargetLabels	<[]string>
     PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created
     metrics.

   sampleLimit	<integer>
     SampleLimit defines per-scrape limit on number of scraped samples that will
     be accepted.

   selector	<Object> -required-
     Selector to select Endpoints objects.

   targetLabels	<[]string>
     TargetLabels transfers labels from the Kubernetes `Service` onto the
     created metrics.

   targetLimit	<integer>
     TargetLimit defines a limit on the number of scraped targets that will be
     accepted.

KIND:     ThanosRuler
VERSION:  monitoring.coreos.com/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of the ThanosRuler cluster. More
     info:
     https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

FIELDS:
   additionalArgs	<[]Object>
     AdditionalArgs allows setting additional arguments for the ThanosRuler
     container. It is intended for e.g. activating hidden flags which are not
     supported by the dedicated configuration options yet. The arguments are
     passed as-is to the ThanosRuler container which may cause issues if they
     are invalid or not supported by the given ThanosRuler version. In case of
     an argument conflict (e.g. an argument which is already set by the operator
     itself) or when providing an invalid argument the reconciliation will fail
     and an error will be logged.

   affinity	<Object>
     If specified, the pod's scheduling constraints.

   alertDropLabels	<[]string>
     AlertDropLabels configure the label names which should be dropped in
     ThanosRuler alerts. The replica label `thanos_ruler_replica` will always be
     dropped in alerts.

   alertQueryUrl	<string>
     The external Query URL the Thanos Ruler will set in the 'Source' field of
     all alerts. Maps to the '--alert.query-url' CLI arg.

   alertRelabelConfigFile	<string>
     AlertRelabelConfigFile specifies the path of the alert relabeling
     configuration file. When used alongside with AlertRelabelConfigs,
     alertRelabelConfigFile takes precedence.

   alertRelabelConfigs	<Object>
     AlertRelabelConfigs configures alert relabeling in ThanosRuler. Alert
     relabel configurations must have the form as specified in the official
     Prometheus documentation:
     https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs
     Alternative to AlertRelabelConfigFile, and lower order priority.

   alertmanagersConfig	<Object>
     Define configuration for connecting to alertmanager. Only available with
     thanos v0.10.0 and higher. Maps to the `alertmanagers.config` arg.

   alertmanagersUrl	<[]string>
     Define URLs to send alerts to Alertmanager. For Thanos v0.10.0 and higher,
     AlertManagersConfig should be used instead. Note: this field will be
     ignored if AlertManagersConfig is specified. Maps to the
     `alertmanagers.url` arg.

   containers	<[]Object>
     Containers allows injecting additional containers or modifying operator
     generated containers. This can be used to allow adding an authentication
     proxy to a ThanosRuler pod or to change the behavior of an operator
     generated container. Containers described here modify an operator generated
     container if they share the same name and modifications are done via a
     strategic merge patch. The current container names are: `thanos-ruler` and
     `config-reloader`. Overriding containers is entirely outside the scope of
     what the maintainers will support and by doing so, you accept that this
     behaviour may break at any time without notice.

   enforcedNamespaceLabel	<string>
     EnforcedNamespaceLabel enforces adding a namespace label of origin for each
     alert and metric that is user created. The label value will always be the
     namespace of the object that is being created.

   evaluationInterval	<string>
     Interval between consecutive evaluations.

   excludedFromEnforcement	<[]Object>
     List of references to PrometheusRule objects to be excluded from enforcing
     a namespace label of origin. Applies only if enforcedNamespaceLabel set to
     true.

   externalPrefix	<string>
     The external URL the Thanos Ruler instances will be available under. This
     is necessary to generate correct URLs. This is necessary if Thanos Ruler is
     not served from root of a DNS name.

   grpcServerTlsConfig	<Object>
     GRPCServerTLSConfig configures the gRPC server from which Thanos Querier
     reads recorded rule data. Note: Currently only the CAFile, CertFile, and
     KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.

   hostAliases	<[]Object>
     Pods' hostAliases configuration

   image	<string>
     Thanos container image URL.

   imagePullPolicy	<string>
     Image pull policy for the 'thanos', 'init-config-reloader' and
     'config-reloader' containers. See
     https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
     for more details.

   imagePullSecrets	<[]Object>
     An optional list of references to secrets in the same namespace to use for
     pulling thanos images from registries see
     http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod

   initContainers	<[]Object>
     InitContainers allows adding initContainers to the pod definition. Those
     can be used to e.g. fetch secrets for injection into the ThanosRuler
     configuration from external sources. Any errors during the execution of an
     initContainer will lead to a restart of the Pod. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using
     initContainers for any use case other then secret fetching is entirely
     outside the scope of what the maintainers will support and by doing so, you
     accept that this behaviour may break at any time without notice.

   labels	<map[string]string>
     Labels configure the external label pairs to ThanosRuler. A default replica
     label `thanos_ruler_replica` will be always added as a label with the value
     of the pod's name and it will be dropped in the alerts.

   listenLocal	<boolean>
     ListenLocal makes the Thanos ruler listen on loopback, so that it does not
     bind against the Pod IP.

   logFormat	<string>
     Log format for ThanosRuler to be configured with.

   logLevel	<string>
     Log level for ThanosRuler to be configured with.

   minReadySeconds	<integer>
     Minimum number of seconds for which a newly created pod should be ready
     without any of its container crashing for it to be considered available.
     Defaults to 0 (pod will be considered available as soon as it is ready)
     This is an alpha field from kubernetes 1.22 until 1.24 which requires
     enabling the StatefulSetMinReadySeconds feature gate.

   nodeSelector	<map[string]string>
     Define which Nodes the Pods are scheduled on.

   objectStorageConfig	<Object>
     ObjectStorageConfig configures object storage in Thanos. Alternative to
     ObjectStorageConfigFile, and lower order priority.

   objectStorageConfigFile	<string>
     ObjectStorageConfigFile specifies the path of the object storage
     configuration file. When used alongside with ObjectStorageConfig,
     ObjectStorageConfigFile takes precedence.

   paused	<boolean>
     When a ThanosRuler deployment is paused, no actions except for deletion
     will be performed on the underlying objects.

   podMetadata	<Object>
     PodMetadata contains Labels and Annotations gets propagated to the thanos
     ruler pods.

   portName	<string>
     Port name used for the pods and governing service. Defaults to `web`.

   priorityClassName	<string>
     Priority class assigned to the Pods

   prometheusRulesExcludedFromEnforce	<[]Object>
     PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be
     excluded from enforcing of adding namespace labels. Works only if
     enforcedNamespaceLabel set to true. Make sure both ruleNamespace and
     ruleName are set for each pair Deprecated: use excludedFromEnforcement
     instead.

   queryConfig	<Object>
     Define configuration for connecting to thanos query instances. If this is
     defined, the QueryEndpoints field will be ignored. Maps to the
     `query.config` CLI argument. Only available with thanos v0.11.0 and higher.

   queryEndpoints	<[]string>
     QueryEndpoints defines Thanos querier endpoints from which to query
     metrics. Maps to the --query flag of thanos ruler.

   replicas	<integer>
     Number of thanos ruler instances to deploy.

   resources	<Object>
     Resources defines the resource requirements for single Pods. If not
     provided, no requests/limits will be set

   retention	<string>
     Time duration ThanosRuler shall retain data for. Default is '24h', and must
     match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds
     minutes hours days weeks years).

   routePrefix	<string>
     The route prefix ThanosRuler registers HTTP handlers for. This allows
     thanos UI to be served on a sub-path.

   ruleNamespaceSelector	<Object>
     Namespaces to be selected for Rules discovery. If unspecified, only the
     same namespace as the ThanosRuler object is in is used.

   ruleSelector	<Object>
     A label selector to select which PrometheusRules to mount for alerting and
     recording.

   securityContext	<Object>
     SecurityContext holds pod-level security attributes and common container
     settings. This defaults to the default PodSecurityContext.

   serviceAccountName	<string>
     ServiceAccountName is the name of the ServiceAccount to use to run the
     Thanos Ruler Pods.

   storage	<Object>
     Storage spec to specify how storage shall be used.

   tolerations	<[]Object>
     If specified, the pod's tolerations.

   topologySpreadConstraints	<[]Object>
     If specified, the pod's topology spread constraints.

   tracingConfig	<Object>
     TracingConfig configures tracing in Thanos. This is an experimental
     feature, it may change in any upcoming release in a breaking way.

   tracingConfigFile	<string>
     TracingConfig specifies the path of the tracing configuration file. When
     used alongside with TracingConfig, TracingConfigFile takes precedence.

   version	<string>
     Version of Thanos to be deployed.

   volumeMounts	<[]Object>
     VolumeMounts allows configuration of additional VolumeMounts on the output
     StatefulSet definition. VolumeMounts specified will be appended to other
     VolumeMounts in the ruler container, that are generated as a result of
     StorageSpec objects.

   volumes	<[]Object>
     Volumes allows configuration of additional volumes on the output
     StatefulSet definition. Volumes specified will be appended to other volumes
     that are generated as a result of StorageSpec objects.

KIND:     IngressClass
VERSION:  networking.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec is the desired state of the IngressClass. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     IngressClassSpec provides information about the class of an Ingress.

FIELDS:
   controller	<string>
     Controller refers to the name of the controller that should handle this
     class. This allows for different "flavors" that are controlled by the same
     controller. For example, you may have different Parameters for the same
     implementing controller. This should be specified as a domain-prefixed path
     no more than 250 characters in length, e.g. "acme.io/ingress-controller".
     This field is immutable.

   parameters	<Object>
     Parameters is a link to a custom resource containing additional
     configuration for the controller. This is optional if the controller does
     not require extra parameters.

KIND:     Ingress
VERSION:  networking.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Spec is the desired state of the Ingress. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

     IngressSpec describes the Ingress the user wishes to exist.

FIELDS:
   defaultBackend	<Object>
     DefaultBackend is the backend that should handle requests that don't match
     any rule. If Rules are not specified, DefaultBackend must be specified. If
     DefaultBackend is not set, the handling of requests that do not match any
     of the rules will be up to the Ingress controller.

   ingressClassName	<string>
     IngressClassName is the name of the IngressClass cluster resource. The
     associated IngressClass defines which controller will implement the
     resource. This replaces the deprecated `kubernetes.io/ingress.class`
     annotation. For backwards compatibility, when that annotation is set, it
     must be given precedence over this field. The controller may emit a warning
     if the field and annotation have different values. Implementations of this
     API should ignore Ingresses without a class specified. An IngressClass
     resource may be marked as default, which can be used to set a default value
     for this field. For more information, refer to the IngressClass
     documentation.

   rules	<[]Object>
     A list of host rules used to configure the Ingress. If unspecified, or no
     rule matches, all traffic is sent to the default backend.

   tls	<[]Object>
     TLS configuration. Currently the Ingress only supports a single TLS port,
     443. If multiple members of this list specify different hosts, they will be
     multiplexed on the same port according to the hostname specified through
     the SNI TLS extension, if the ingress controller fulfilling the ingress
     supports SNI.

KIND:     NetworkPolicy
VERSION:  networking.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior for this NetworkPolicy.

     NetworkPolicySpec provides the specification of a NetworkPolicy

FIELDS:
   egress	<[]Object>
     List of egress rules to be applied to the selected pods. Outgoing traffic
     is allowed if there are no NetworkPolicies selecting the pod (and cluster
     policy otherwise allows the traffic), OR if the traffic matches at least
     one egress rule across all of the NetworkPolicy objects whose podSelector
     matches the pod. If this field is empty then this NetworkPolicy limits all
     outgoing traffic (and serves solely to ensure that the pods it selects are
     isolated by default). This field is beta-level in 1.8

   ingress	<[]Object>
     List of ingress rules to be applied to the selected pods. Traffic is
     allowed to a pod if there are no NetworkPolicies selecting the pod (and
     cluster policy otherwise allows the traffic), OR if the traffic source is
     the pod's local node, OR if the traffic matches at least one ingress rule
     across all of the NetworkPolicy objects whose podSelector matches the pod.
     If this field is empty then this NetworkPolicy does not allow any traffic
     (and serves solely to ensure that the pods it selects are isolated by
     default)

   podSelector	<Object> -required-
     Selects the pods to which this NetworkPolicy object applies. The array of
     ingress rules is applied to any pods selected by this field. Multiple
     network policies can select the same set of pods. In this case, the ingress
     rules for each are combined additively. This field is NOT optional and
     follows standard label selector semantics. An empty podSelector matches all
     pods in this namespace.

   policyTypes	<[]string>
     List of rule types that the NetworkPolicy relates to. Valid options are
     "Ingress", "Egress", or "Ingress,Egress". If this field is not specified,
     it will default based on the existence of Ingress or Egress rules; policies
     that contain an Egress section are assumed to affect Egress, and all
     policies (whether or not they contain an Ingress section) are assumed to
     affect Ingress. If you want to write an egress-only policy, you must
     explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write
     a policy that specifies that no egress is allowed, you must specify a
     policyTypes value that include "Egress" (since such a policy would not
     include an Egress section and would otherwise default to just [ "Ingress"
     ]). This field is beta-level in 1.8

KIND:     BlockDeviceClaim
VERSION:  openebs.io/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     DeviceClaimSpec defines the request details for a BlockDevice

FIELDS:
   blockDeviceName	<string>
     BlockDeviceName is the reference to the block-device backing this claim

   blockDeviceNodeAttributes	<Object>
     BlockDeviceNodeAttributes is the attributes on the node from which a BD
     should be selected for this claim. It can include nodename, failure domain
     etc.

   deviceClaimDetails	<Object>
     Details of the device to be claimed

   deviceType	<>
     DeviceType represents the type of drive like SSD, HDD etc.,

   hostName	<string>
     Node name from where blockdevice has to be claimed. To be deprecated. Use
     NodeAttributes.HostName instead

   resources	<Object>
     Resources will help with placing claims on Capacity, IOPS

   selector	<Object>
     Selector is used to find block devices to be considered for claiming

KIND:     BlockDevice
VERSION:  openebs.io/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     DeviceSpec defines the properties and runtime status of a BlockDevice

FIELDS:
   aggregateDevice	<string>
     AggregateDevice was intended to store the hierarchical information in cases
     of LVM. However this is currently not implemented and may need to be
     re-looked into for better design. To be deprecated

   capacity	<Object> -required-
     Capacity

   claimRef	<Object>
     ClaimRef is the reference to the BDC which has claimed this BD

   details	<Object>
     Details contain static attributes of BD like model,serial, and so forth

   devlinks	<[]Object> -required-
     DevLinks contains soft links of a block device like /dev/by-id/...
     /dev/by-uuid/...

   filesystem	<Object>
     FileSystem contains mountpoint and filesystem type

   nodeAttributes	<Object> -required-
     NodeAttributes has the details of the node on which BD is attached

   parentDevice	<string>
     ParentDevice was intended to store the UUID of the parent Block Device as
     is the case for partitioned block devices. For example: /dev/sda is the
     parent for /dev/sda1 To be deprecated

   partitioned	<string>
     Partitioned represents if BlockDevice has partitions or not (Yes/No)
     Currently always default to No. To be deprecated

   path	<string> -required-
     Path contain devpath (e.g. /dev/sdb)

KIND:     PodDisruptionBudget
VERSION:  policy/v1beta1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired behavior of the PodDisruptionBudget.

     PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.

FIELDS:
   maxUnavailable	<string>
     An eviction is allowed if at most "maxUnavailable" pods selected by
     "selector" are unavailable after the eviction, i.e. even in absence of the
     evicted pod. For example, one can prevent all voluntary evictions by
     specifying 0. This is a mutually exclusive setting with "minAvailable".

   minAvailable	<string>
     An eviction is allowed if at least "minAvailable" pods selected by
     "selector" will still be available after the eviction, i.e. even in the
     absence of the evicted pod. So for example you can prevent all voluntary
     evictions by specifying "100%".

   selector	<Object>
     Label query over pods whose evictions are managed by the disruption budget.

KIND:     PodSecurityPolicy
VERSION:  policy/v1beta1

RESOURCE: spec <Object>

DESCRIPTION:
     spec defines the policy enforced.

     PodSecurityPolicySpec defines the policy enforced.

FIELDS:
   allowPrivilegeEscalation	<boolean>
     allowPrivilegeEscalation determines if a pod can request to allow privilege
     escalation. If unspecified, defaults to true.

   allowedCSIDrivers	<[]Object>
     AllowedCSIDrivers is an allowlist of inline CSI drivers that must be
     explicitly set to be embedded within a pod spec. An empty value indicates
     that any CSI driver can be used for inline ephemeral volumes. This is a
     beta field, and is only honored if the API server enables the
     CSIInlineVolume feature gate.

   allowedCapabilities	<[]string>
     allowedCapabilities is a list of capabilities that can be requested to add
     to the container. Capabilities in this field may be added at the pod
     author's discretion. You must not list a capability in both
     allowedCapabilities and requiredDropCapabilities.

   allowedFlexVolumes	<[]Object>
     allowedFlexVolumes is an allowlist of Flexvolumes. Empty or nil indicates
     that all Flexvolumes may be used. This parameter is effective only when the
     usage of the Flexvolumes is allowed in the "volumes" field.

   allowedHostPaths	<[]Object>
     allowedHostPaths is an allowlist of host paths. Empty indicates that all
     host paths may be used.

   allowedProcMountTypes	<[]string>
     AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or
     nil indicates that only the DefaultProcMountType may be used. This requires
     the ProcMountType feature flag to be enabled.

   allowedUnsafeSysctls	<[]string>
     allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls,
     defaults to none. Each entry is either a plain sysctl name or ends in "*"
     in which case it is considered as a prefix of allowed sysctls. Single *
     means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed
     unsafe sysctls explicitly to avoid rejection.

     Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*"
     allows "foo.bar", "foo.baz", etc.

   defaultAddCapabilities	<[]string>
     defaultAddCapabilities is the default set of capabilities that will be
     added to the container unless the pod spec specifically drops the
     capability. You may not list a capability in both defaultAddCapabilities
     and requiredDropCapabilities. Capabilities added here are implicitly
     allowed, and need not be included in the allowedCapabilities list.

   defaultAllowPrivilegeEscalation	<boolean>
     defaultAllowPrivilegeEscalation controls the default setting for whether a
     process can gain more privileges than its parent process.

   forbiddenSysctls	<[]string>
     forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to
     none. Each entry is either a plain sysctl name or ends in "*" in which case
     it is considered as a prefix of forbidden sysctls. Single * means all
     sysctls are forbidden.

     Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*"
     forbids "foo.bar", "foo.baz", etc.

   fsGroup	<Object> -required-
     fsGroup is the strategy that will dictate what fs group is used by the
     SecurityContext.

   hostIPC	<boolean>
     hostIPC determines if the policy allows the use of HostIPC in the pod spec.

   hostNetwork	<boolean>
     hostNetwork determines if the policy allows the use of HostNetwork in the
     pod spec.

   hostPID	<boolean>
     hostPID determines if the policy allows the use of HostPID in the pod spec.

   hostPorts	<[]Object>
     hostPorts determines which host port ranges are allowed to be exposed.

   privileged	<boolean>
     privileged determines if a pod can request to be run as privileged.

   readOnlyRootFilesystem	<boolean>
     readOnlyRootFilesystem when set to true will force containers to run with a
     read only root file system. If the container specifically requests to run
     with a non-read only root file system the PSP should deny the pod. If set
     to false the container may run with a read only root file system if it
     wishes but it will not be forced to.

   requiredDropCapabilities	<[]string>
     requiredDropCapabilities are the capabilities that will be dropped from the
     container. These are required to be dropped and cannot be added.

   runAsGroup	<Object>
     RunAsGroup is the strategy that will dictate the allowable RunAsGroup
     values that may be set. If this field is omitted, the pod's RunAsGroup can
     take any value. This field requires the RunAsGroup feature gate to be
     enabled.

   runAsUser	<Object> -required-
     runAsUser is the strategy that will dictate the allowable RunAsUser values
     that may be set.

   runtimeClass	<Object>
     runtimeClass is the strategy that will dictate the allowable RuntimeClasses
     for a pod. If this field is omitted, the pod's runtimeClassName field is
     unrestricted. Enforcement of this field depends on the RuntimeClass feature
     gate being enabled.

   seLinux	<Object> -required-
     seLinux is the strategy that will dictate the allowable labels that may be
     set.

   supplementalGroups	<Object> -required-
     supplementalGroups is the strategy that will dictate what supplemental
     groups are used by the SecurityContext.

   volumes	<[]string>
     volumes is an allowlist of volume plugins. Empty indicates that no volumes
     may be used. To allow all volumes you may use '*'.

KIND:     CSIDriver
VERSION:  storage.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the CSI Driver.

     CSIDriverSpec is the specification of a CSIDriver.

FIELDS:
   attachRequired	<boolean>
     attachRequired indicates this CSI volume driver requires an attach
     operation (because it implements the CSI ControllerPublishVolume() method),
     and that the Kubernetes attach detach controller should call the attach
     volume interface which checks the volumeattachment status and waits until
     the volume is attached before proceeding to mounting. The CSI
     external-attacher coordinates with CSI volume driver and updates the
     volumeattachment status when the attach operation is complete. If the
     CSIDriverRegistry feature gate is enabled and the value is specified to
     false, the attach operation will be skipped. Otherwise the attach operation
     will be called.

   fsGroupPolicy	<string>
     Defines if the underlying volume supports changing ownership and permission
     of the volume before being mounted. Refer to the specific FSGroupPolicy
     values for additional details. This field is alpha-level, and is only
     honored by servers that enable the CSIVolumeFSGroupPolicy feature gate.

   podInfoOnMount	<boolean>
     If set to true, podInfoOnMount indicates this CSI volume driver requires
     additional pod information (like podName, podUID, etc.) during mount
     operations. If set to false, pod information will not be passed on mount.
     Default is false. The CSI driver specifies podInfoOnMount as part of driver
     deployment. If true, Kubelet will pass pod information as VolumeContext in
     the CSI NodePublishVolume() calls. The CSI driver is responsible for
     parsing and validating the information passed in as VolumeContext. The
     following VolumeConext will be passed if podInfoOnMount is set to true.
     This list might grow, but the prefix will be used.
     "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace":
     pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID)
     "csi.storage.k8s.io/ephemeral": "true" iff the volume is an ephemeral
     inline volume
                                     defined by a CSIVolumeSource, otherwise "false"

     "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is
     only required for drivers which support both the "Persistent" and
     "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled
     and/or ignore this field. As Kubernetes 1.15 doesn't support this field,
     drivers can only support one mode when deployed on such a cluster and the
     deployment determines which mode that is, for example via a command line
     parameter of the driver.

   requiresRepublish	<boolean>
     RequiresRepublish indicates the CSI driver wants `NodePublishVolume` being
     periodically called to reflect any possible change in the mounted volume.
     This field defaults to false.

     Note: After a successful initial NodePublishVolume call, subsequent calls
     to NodePublishVolume should only update the contents of the volume. New
     mount points will not be seen by a running container.

     This is an alpha feature and only available when the CSIServiceAccountToken
     feature is enabled.

   storageCapacity	<boolean>
     If set to true, storageCapacity indicates that the CSI volume driver wants
     pod scheduling to consider the storage capacity that the driver deployment
     will report by creating CSIStorageCapacity objects with capacity
     information.

     The check can be enabled immediately when deploying a driver. In that case,
     provisioning new volumes with late binding will pause until the driver
     deployment has published some suitable CSIStorageCapacity object.

     Alternatively, the driver can be deployed with the field unset or false and
     it can be flipped later when storage capacity information has been
     published.

     This is an alpha field and only available when the CSIStorageCapacity
     feature is enabled. The default is false.

   tokenRequests	<[]Object>
     TokenRequests indicates the CSI driver needs pods' service account tokens
     it is mounting volume for to do necessary authentication. Kubelet will pass
     the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI
     driver should parse and validate the following VolumeContext:
     "csi.storage.k8s.io/serviceAccount.tokens": { "<audience>": {
         "token": <token>,
         "expirationTimestamp": <expiration timestamp in RFC3339>,
     }, ... }

     Note: Audience in each TokenRequest should be different and at most one
     token is empty string. To receive a new token after expiry,
     RequiresRepublish can be used to trigger NodePublishVolume periodically.

     This is an alpha feature and only available when the CSIServiceAccountToken
     feature is enabled.

   volumeLifecycleModes	<[]string>
     volumeLifecycleModes defines what kind of volumes this CSI volume driver
     supports. The default if the list is empty is "Persistent", which is the
     usage defined by the CSI specification and implemented in Kubernetes via
     the usual PV/PVC mechanism. The other mode is "Ephemeral". In this mode,
     volumes are defined inline inside the pod spec with CSIVolumeSource and
     their lifecycle is tied to the lifecycle of that pod. A driver has to be
     aware of this because it is only going to get a NodePublishVolume call for
     such a volume. For more information about implementing this mode, see
     https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver
     can support one or more of these modes and more modes may be added in the
     future. This field is beta.

KIND:     CSINode
VERSION:  storage.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     spec is the specification of CSINode

     CSINodeSpec holds information about the specification of all CSI drivers
     installed on a node

FIELDS:
   drivers	<[]Object> -required-
     drivers is a list of information of all CSI Drivers existing on a node. If
     all drivers in the list are uninstalled, this can become empty.

KIND:     VolumeAttachment
VERSION:  storage.k8s.io/v1

RESOURCE: spec <Object>

DESCRIPTION:
     Specification of the desired attach/detach volume behavior. Populated by
     the Kubernetes system.

     VolumeAttachmentSpec is the specification of a VolumeAttachment request.

FIELDS:
   attacher	<string> -required-
     Attacher indicates the name of the volume driver that MUST handle this
     request. This is the name returned by GetPluginName().

   nodeName	<string> -required-
     The node that the volume should be attached to.

   source	<Object> -required-
     Source represents the volume that should be attached.

KIND:     PolicyBinding
VERSION:  sts.min.io/v1alpha1

RESOURCE: spec <Object>

DESCRIPTION:
     <empty>

FIELDS:
   application	<Object> -required-

   policies	<[]string> -required-

